// Autogenerated by Thrift Compiler (0.11.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package pico3_thrift

import (
	"bytes"
	"reflect"
	"database/sql/driver"
	"errors"
	"context"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

type ImageUploadType int64
const (
  ImageUploadType_UPLOADED_SUCCESS ImageUploadType = 1
  ImageUploadType_NEW_UPLOAD ImageUploadType = 2
)

func (p ImageUploadType) String() string {
  switch p {
  case ImageUploadType_UPLOADED_SUCCESS: return "UPLOADED_SUCCESS"
  case ImageUploadType_NEW_UPLOAD: return "NEW_UPLOAD"
  }
  return "<UNSET>"
}

func ImageUploadTypeFromString(s string) (ImageUploadType, error) {
  switch s {
  case "UPLOADED_SUCCESS": return ImageUploadType_UPLOADED_SUCCESS, nil 
  case "NEW_UPLOAD": return ImageUploadType_NEW_UPLOAD, nil 
  }
  return ImageUploadType(0), fmt.Errorf("not a valid ImageUploadType string")
}


func ImageUploadTypePtr(v ImageUploadType) *ImageUploadType { return &v }

func (p ImageUploadType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *ImageUploadType) UnmarshalText(text []byte) error {
q, err := ImageUploadTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *ImageUploadType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = ImageUploadType(v)
return nil
}

func (p * ImageUploadType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type ImageUploadState int64
const (
  ImageUploadState_INIT ImageUploadState = 0
  ImageUploadState_UPLOAD_FAIL ImageUploadState = 1
  ImageUploadState_PROCESSING ImageUploadState = 2
  ImageUploadState_PROCESS_FAIL ImageUploadState = 3
  ImageUploadState_SUCCESS ImageUploadState = 4
)

func (p ImageUploadState) String() string {
  switch p {
  case ImageUploadState_INIT: return "INIT"
  case ImageUploadState_UPLOAD_FAIL: return "UPLOAD_FAIL"
  case ImageUploadState_PROCESSING: return "PROCESSING"
  case ImageUploadState_PROCESS_FAIL: return "PROCESS_FAIL"
  case ImageUploadState_SUCCESS: return "SUCCESS"
  }
  return "<UNSET>"
}

func ImageUploadStateFromString(s string) (ImageUploadState, error) {
  switch s {
  case "INIT": return ImageUploadState_INIT, nil 
  case "UPLOAD_FAIL": return ImageUploadState_UPLOAD_FAIL, nil 
  case "PROCESSING": return ImageUploadState_PROCESSING, nil 
  case "PROCESS_FAIL": return ImageUploadState_PROCESS_FAIL, nil 
  case "SUCCESS": return ImageUploadState_SUCCESS, nil 
  }
  return ImageUploadState(0), fmt.Errorf("not a valid ImageUploadState string")
}


func ImageUploadStatePtr(v ImageUploadState) *ImageUploadState { return &v }

func (p ImageUploadState) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *ImageUploadState) UnmarshalText(text []byte) error {
q, err := ImageUploadStateFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *ImageUploadState) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = ImageUploadState(v)
return nil
}

func (p * ImageUploadState) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
// Attributes:
//  - Code
//  - Message
type InvalidInput struct {
  Code int32 `thrift:"code,1" db:"code" json:"code"`
  Message string `thrift:"message,2" db:"message" json:"message"`
}

func NewInvalidInput() *InvalidInput {
  return &InvalidInput{
Code: 400,
}
}


func (p *InvalidInput) GetCode() int32 {
  return p.Code
}

func (p *InvalidInput) GetMessage() string {
  return p.Message
}
func (p *InvalidInput) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *InvalidInput)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Code = v
}
  return nil
}

func (p *InvalidInput)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Message = v
}
  return nil
}

func (p *InvalidInput) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("InvalidInput"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *InvalidInput) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *InvalidInput) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("message", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:message: ", p), err) }
  if err := oprot.WriteString(string(p.Message)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.message (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:message: ", p), err) }
  return err
}

func (p *InvalidInput) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("InvalidInput(%+v)", *p)
}

func (p *InvalidInput) Error() string {
  return p.String()
}

// Attributes:
//  - Format
//  - Height
//  - Width
//  - Size
type ImageMeta struct {
  Format *string `thrift:"format,1" db:"format" json:"format,omitempty"`
  Height *int32 `thrift:"height,2" db:"height" json:"height,omitempty"`
  Width *int32 `thrift:"width,3" db:"width" json:"width,omitempty"`
  Size *int64 `thrift:"size,4" db:"size" json:"size,omitempty"`
}

func NewImageMeta() *ImageMeta {
  return &ImageMeta{}
}

var ImageMeta_Format_DEFAULT string
func (p *ImageMeta) GetFormat() string {
  if !p.IsSetFormat() {
    return ImageMeta_Format_DEFAULT
  }
return *p.Format
}
var ImageMeta_Height_DEFAULT int32
func (p *ImageMeta) GetHeight() int32 {
  if !p.IsSetHeight() {
    return ImageMeta_Height_DEFAULT
  }
return *p.Height
}
var ImageMeta_Width_DEFAULT int32
func (p *ImageMeta) GetWidth() int32 {
  if !p.IsSetWidth() {
    return ImageMeta_Width_DEFAULT
  }
return *p.Width
}
var ImageMeta_Size_DEFAULT int64
func (p *ImageMeta) GetSize() int64 {
  if !p.IsSetSize() {
    return ImageMeta_Size_DEFAULT
  }
return *p.Size
}
func (p *ImageMeta) IsSetFormat() bool {
  return p.Format != nil
}

func (p *ImageMeta) IsSetHeight() bool {
  return p.Height != nil
}

func (p *ImageMeta) IsSetWidth() bool {
  return p.Width != nil
}

func (p *ImageMeta) IsSetSize() bool {
  return p.Size != nil
}

func (p *ImageMeta) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ImageMeta)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Format = &v
}
  return nil
}

func (p *ImageMeta)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Height = &v
}
  return nil
}

func (p *ImageMeta)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Width = &v
}
  return nil
}

func (p *ImageMeta)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Size = &v
}
  return nil
}

func (p *ImageMeta) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ImageMeta"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ImageMeta) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetFormat() {
    if err := oprot.WriteFieldBegin("format", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:format: ", p), err) }
    if err := oprot.WriteString(string(*p.Format)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.format (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:format: ", p), err) }
  }
  return err
}

func (p *ImageMeta) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetHeight() {
    if err := oprot.WriteFieldBegin("height", thrift.I32, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:height: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Height)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.height (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:height: ", p), err) }
  }
  return err
}

func (p *ImageMeta) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetWidth() {
    if err := oprot.WriteFieldBegin("width", thrift.I32, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:width: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Width)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.width (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:width: ", p), err) }
  }
  return err
}

func (p *ImageMeta) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetSize() {
    if err := oprot.WriteFieldBegin("size", thrift.I64, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:size: ", p), err) }
    if err := oprot.WriteI64(int64(*p.Size)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.size (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:size: ", p), err) }
  }
  return err
}

func (p *ImageMeta) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ImageMeta(%+v)", *p)
}

// Attributes:
//  - Token
type GetImageInfoParam struct {
  Token string `thrift:"token,1,required" db:"token" json:"token"`
}

func NewGetImageInfoParam() *GetImageInfoParam {
  return &GetImageInfoParam{}
}


func (p *GetImageInfoParam) GetToken() string {
  return p.Token
}
func (p *GetImageInfoParam) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetToken bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetToken = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Token is not set"));
  }
  return nil
}

func (p *GetImageInfoParam)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Token = v
}
  return nil
}

func (p *GetImageInfoParam) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetImageInfoParam"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetImageInfoParam) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("token", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:token: ", p), err) }
  if err := oprot.WriteString(string(p.Token)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.token (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:token: ", p), err) }
  return err
}

func (p *GetImageInfoParam) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetImageInfoParam(%+v)", *p)
}

// Attributes:
//  - Width
//  - Height
//  - Quality
//  - Mode
type ImageSpecsObject struct {
  Width int32 `thrift:"width,1,required" db:"width" json:"width"`
  Height int32 `thrift:"height,2,required" db:"height" json:"height"`
  Quality int16 `thrift:"quality,3,required" db:"quality" json:"quality"`
  Mode string `thrift:"mode,4,required" db:"mode" json:"mode"`
}

func NewImageSpecsObject() *ImageSpecsObject {
  return &ImageSpecsObject{}
}


func (p *ImageSpecsObject) GetWidth() int32 {
  return p.Width
}

func (p *ImageSpecsObject) GetHeight() int32 {
  return p.Height
}

func (p *ImageSpecsObject) GetQuality() int16 {
  return p.Quality
}

func (p *ImageSpecsObject) GetMode() string {
  return p.Mode
}
func (p *ImageSpecsObject) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetWidth bool = false;
  var issetHeight bool = false;
  var issetQuality bool = false;
  var issetMode bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetWidth = true
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetHeight = true
    case 3:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetQuality = true
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetMode = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetWidth{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Width is not set"));
  }
  if !issetHeight{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Height is not set"));
  }
  if !issetQuality{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Quality is not set"));
  }
  if !issetMode{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Mode is not set"));
  }
  return nil
}

func (p *ImageSpecsObject)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Width = v
}
  return nil
}

func (p *ImageSpecsObject)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Height = v
}
  return nil
}

func (p *ImageSpecsObject)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Quality = v
}
  return nil
}

func (p *ImageSpecsObject)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Mode = v
}
  return nil
}

func (p *ImageSpecsObject) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ImageSpecsObject"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ImageSpecsObject) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("width", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:width: ", p), err) }
  if err := oprot.WriteI32(int32(p.Width)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.width (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:width: ", p), err) }
  return err
}

func (p *ImageSpecsObject) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("height", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:height: ", p), err) }
  if err := oprot.WriteI32(int32(p.Height)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.height (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:height: ", p), err) }
  return err
}

func (p *ImageSpecsObject) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("quality", thrift.I16, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:quality: ", p), err) }
  if err := oprot.WriteI16(int16(p.Quality)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.quality (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:quality: ", p), err) }
  return err
}

func (p *ImageSpecsObject) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("mode", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:mode: ", p), err) }
  if err := oprot.WriteString(string(p.Mode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mode (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:mode: ", p), err) }
  return err
}

func (p *ImageSpecsObject) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ImageSpecsObject(%+v)", *p)
}

// Attributes:
//  - Image
//  - Object
//  - Watermark
type WaterMarkObject struct {
  Image string `thrift:"image,1,required" db:"image" json:"image"`
  Object string `thrift:"object,2,required" db:"object" json:"object"`
  Watermark int16 `thrift:"watermark,3,required" db:"watermark" json:"watermark"`
}

func NewWaterMarkObject() *WaterMarkObject {
  return &WaterMarkObject{}
}


func (p *WaterMarkObject) GetImage() string {
  return p.Image
}

func (p *WaterMarkObject) GetObject() string {
  return p.Object
}

func (p *WaterMarkObject) GetWatermark() int16 {
  return p.Watermark
}
func (p *WaterMarkObject) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetImage bool = false;
  var issetObject bool = false;
  var issetWatermark bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetImage = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetObject = true
    case 3:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetWatermark = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetImage{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Image is not set"));
  }
  if !issetObject{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Object is not set"));
  }
  if !issetWatermark{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Watermark is not set"));
  }
  return nil
}

func (p *WaterMarkObject)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Image = v
}
  return nil
}

func (p *WaterMarkObject)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Object = v
}
  return nil
}

func (p *WaterMarkObject)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Watermark = v
}
  return nil
}

func (p *WaterMarkObject) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("WaterMarkObject"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WaterMarkObject) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("image", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:image: ", p), err) }
  if err := oprot.WriteString(string(p.Image)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.image (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:image: ", p), err) }
  return err
}

func (p *WaterMarkObject) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("object", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:object: ", p), err) }
  if err := oprot.WriteString(string(p.Object)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.object (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:object: ", p), err) }
  return err
}

func (p *WaterMarkObject) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("watermark", thrift.I16, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:watermark: ", p), err) }
  if err := oprot.WriteI16(int16(p.Watermark)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.watermark (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:watermark: ", p), err) }
  return err
}

func (p *WaterMarkObject) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WaterMarkObject(%+v)", *p)
}

// Attributes:
//  - Specs
//  - Watermarks
type ImageSpecsData struct {
  Specs map[string]*ImageSpecsObject `thrift:"specs,1,required" db:"specs" json:"specs"`
  Watermarks map[string]*WaterMarkObject `thrift:"watermarks,2" db:"watermarks" json:"watermarks,omitempty"`
}

func NewImageSpecsData() *ImageSpecsData {
  return &ImageSpecsData{}
}


func (p *ImageSpecsData) GetSpecs() map[string]*ImageSpecsObject {
  return p.Specs
}
var ImageSpecsData_Watermarks_DEFAULT map[string]*WaterMarkObject

func (p *ImageSpecsData) GetWatermarks() map[string]*WaterMarkObject {
  return p.Watermarks
}
func (p *ImageSpecsData) IsSetWatermarks() bool {
  return p.Watermarks != nil
}

func (p *ImageSpecsData) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetSpecs bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetSpecs = true
    case 2:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetSpecs{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Specs is not set"));
  }
  return nil
}

func (p *ImageSpecsData)  ReadField1(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]*ImageSpecsObject, size)
  p.Specs =  tMap
  for i := 0; i < size; i ++ {
var _key0 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key0 = v
}
    _val1 := &ImageSpecsObject{}
    if err := _val1.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val1), err)
    }
    p.Specs[_key0] = _val1
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *ImageSpecsData)  ReadField2(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]*WaterMarkObject, size)
  p.Watermarks =  tMap
  for i := 0; i < size; i ++ {
var _key2 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key2 = v
}
    _val3 := &WaterMarkObject{}
    if err := _val3.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val3), err)
    }
    p.Watermarks[_key2] = _val3
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *ImageSpecsData) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ImageSpecsData"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ImageSpecsData) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("specs", thrift.MAP, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:specs: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.Specs)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Specs {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:specs: ", p), err) }
  return err
}

func (p *ImageSpecsData) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetWatermarks() {
    if err := oprot.WriteFieldBegin("watermarks", thrift.MAP, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:watermarks: ", p), err) }
    if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.Watermarks)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.Watermarks {
      if err := oprot.WriteString(string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:watermarks: ", p), err) }
  }
  return err
}

func (p *ImageSpecsData) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ImageSpecsData(%+v)", *p)
}

// Attributes:
//  - Tokens
//  - WithFields
type BatchGetImageInfoParam struct {
  Tokens []string `thrift:"tokens,1,required" db:"tokens" json:"tokens"`
  WithFields *[]string `thrift:"with_fields,2" db:"with_fields" json:"with_fields,omitempty"`
}

func NewBatchGetImageInfoParam() *BatchGetImageInfoParam {
  return &BatchGetImageInfoParam{
Tokens: []string{
},
}
}


func (p *BatchGetImageInfoParam) GetTokens() []string {
  return p.Tokens
}
var BatchGetImageInfoParam_WithFields_DEFAULT []string = []string{
}
func (p *BatchGetImageInfoParam) GetWithFields() []string {
  if !p.IsSetWithFields() {
    return BatchGetImageInfoParam_WithFields_DEFAULT
  }
return *p.WithFields
}
func (p *BatchGetImageInfoParam) IsSetWithFields() bool {
  return p.WithFields != nil
}

func (p *BatchGetImageInfoParam) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetTokens bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetTokens = true
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetTokens{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Tokens is not set"));
  }
  return nil
}

func (p *BatchGetImageInfoParam)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Tokens =  tSlice
  for i := 0; i < size; i ++ {
var _elem4 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem4 = v
}
    p.Tokens = append(p.Tokens, _elem4)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *BatchGetImageInfoParam)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.WithFields =  &tSlice
  for i := 0; i < size; i ++ {
var _elem5 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem5 = v
}
    (*p.WithFields) = append((*p.WithFields), _elem5)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *BatchGetImageInfoParam) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("BatchGetImageInfoParam"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BatchGetImageInfoParam) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("tokens", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tokens: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.Tokens)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Tokens {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tokens: ", p), err) }
  return err
}

func (p *BatchGetImageInfoParam) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetWithFields() {
    if err := oprot.WriteFieldBegin("with_fields", thrift.LIST, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:with_fields: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(*p.WithFields)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range *p.WithFields {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:with_fields: ", p), err) }
  }
  return err
}

func (p *BatchGetImageInfoParam) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BatchGetImageInfoParam(%+v)", *p)
}

// Attributes:
//  - ImageHash
//  - Source
//  - MemberID
type ImageDataParam struct {
  ImageHash string `thrift:"image_hash,1,required" db:"image_hash" json:"image_hash"`
  Source string `thrift:"source,2,required" db:"source" json:"source"`
  MemberID *int64 `thrift:"member_id,3" db:"member_id" json:"member_id,omitempty"`
}

func NewImageDataParam() *ImageDataParam {
  return &ImageDataParam{}
}


func (p *ImageDataParam) GetImageHash() string {
  return p.ImageHash
}

func (p *ImageDataParam) GetSource() string {
  return p.Source
}
var ImageDataParam_MemberID_DEFAULT int64
func (p *ImageDataParam) GetMemberID() int64 {
  if !p.IsSetMemberID() {
    return ImageDataParam_MemberID_DEFAULT
  }
return *p.MemberID
}
func (p *ImageDataParam) IsSetMemberID() bool {
  return p.MemberID != nil
}

func (p *ImageDataParam) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetImageHash bool = false;
  var issetSource bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetImageHash = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetSource = true
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetImageHash{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ImageHash is not set"));
  }
  if !issetSource{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Source is not set"));
  }
  return nil
}

func (p *ImageDataParam)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ImageHash = v
}
  return nil
}

func (p *ImageDataParam)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Source = v
}
  return nil
}

func (p *ImageDataParam)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.MemberID = &v
}
  return nil
}

func (p *ImageDataParam) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ImageDataParam"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ImageDataParam) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("image_hash", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:image_hash: ", p), err) }
  if err := oprot.WriteString(string(p.ImageHash)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.image_hash (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:image_hash: ", p), err) }
  return err
}

func (p *ImageDataParam) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("source", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:source: ", p), err) }
  if err := oprot.WriteString(string(p.Source)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.source (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:source: ", p), err) }
  return err
}

func (p *ImageDataParam) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetMemberID() {
    if err := oprot.WriteFieldBegin("member_id", thrift.I64, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:member_id: ", p), err) }
    if err := oprot.WriteI64(int64(*p.MemberID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.member_id (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:member_id: ", p), err) }
  }
  return err
}

func (p *ImageDataParam) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ImageDataParam(%+v)", *p)
}

// Attributes:
//  - ImageID
//  - ImageUploadState
//  - MemberID
//  - IsNeedMeta
type UpdateImageStateParam struct {
  ImageID string `thrift:"image_id,1,required" db:"image_id" json:"image_id"`
  ImageUploadState ImageUploadState `thrift:"image_upload_state,2,required" db:"image_upload_state" json:"image_upload_state"`
  MemberID *int64 `thrift:"member_id,3" db:"member_id" json:"member_id,omitempty"`
  IsNeedMeta *bool `thrift:"is_need_meta,4" db:"is_need_meta" json:"is_need_meta,omitempty"`
}

func NewUpdateImageStateParam() *UpdateImageStateParam {
  return &UpdateImageStateParam{}
}


func (p *UpdateImageStateParam) GetImageID() string {
  return p.ImageID
}

func (p *UpdateImageStateParam) GetImageUploadState() ImageUploadState {
  return p.ImageUploadState
}
var UpdateImageStateParam_MemberID_DEFAULT int64
func (p *UpdateImageStateParam) GetMemberID() int64 {
  if !p.IsSetMemberID() {
    return UpdateImageStateParam_MemberID_DEFAULT
  }
return *p.MemberID
}
var UpdateImageStateParam_IsNeedMeta_DEFAULT bool
func (p *UpdateImageStateParam) GetIsNeedMeta() bool {
  if !p.IsSetIsNeedMeta() {
    return UpdateImageStateParam_IsNeedMeta_DEFAULT
  }
return *p.IsNeedMeta
}
func (p *UpdateImageStateParam) IsSetMemberID() bool {
  return p.MemberID != nil
}

func (p *UpdateImageStateParam) IsSetIsNeedMeta() bool {
  return p.IsNeedMeta != nil
}

func (p *UpdateImageStateParam) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetImageID bool = false;
  var issetImageUploadState bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetImageID = true
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetImageUploadState = true
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetImageID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ImageID is not set"));
  }
  if !issetImageUploadState{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ImageUploadState is not set"));
  }
  return nil
}

func (p *UpdateImageStateParam)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ImageID = v
}
  return nil
}

func (p *UpdateImageStateParam)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := ImageUploadState(v)
  p.ImageUploadState = temp
}
  return nil
}

func (p *UpdateImageStateParam)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.MemberID = &v
}
  return nil
}

func (p *UpdateImageStateParam)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.IsNeedMeta = &v
}
  return nil
}

func (p *UpdateImageStateParam) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("UpdateImageStateParam"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UpdateImageStateParam) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("image_id", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:image_id: ", p), err) }
  if err := oprot.WriteString(string(p.ImageID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.image_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:image_id: ", p), err) }
  return err
}

func (p *UpdateImageStateParam) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("image_upload_state", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:image_upload_state: ", p), err) }
  if err := oprot.WriteI32(int32(p.ImageUploadState)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.image_upload_state (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:image_upload_state: ", p), err) }
  return err
}

func (p *UpdateImageStateParam) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetMemberID() {
    if err := oprot.WriteFieldBegin("member_id", thrift.I64, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:member_id: ", p), err) }
    if err := oprot.WriteI64(int64(*p.MemberID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.member_id (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:member_id: ", p), err) }
  }
  return err
}

func (p *UpdateImageStateParam) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetIsNeedMeta() {
    if err := oprot.WriteFieldBegin("is_need_meta", thrift.BOOL, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:is_need_meta: ", p), err) }
    if err := oprot.WriteBool(bool(*p.IsNeedMeta)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.is_need_meta (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:is_need_meta: ", p), err) }
  }
  return err
}

func (p *UpdateImageStateParam) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UpdateImageStateParam(%+v)", *p)
}

// Attributes:
//  - ImageID
//  - ImageUploadState
//  - ImageSpecs
//  - ImageFormats
//  - MemberID
type UpdateAndProcessPrivacyImageParam struct {
  ImageID int64 `thrift:"image_id,1,required" db:"image_id" json:"image_id"`
  ImageUploadState ImageUploadState `thrift:"image_upload_state,2,required" db:"image_upload_state" json:"image_upload_state"`
  ImageSpecs []string `thrift:"image_specs,3,required" db:"image_specs" json:"image_specs"`
  ImageFormats []string `thrift:"image_formats,4,required" db:"image_formats" json:"image_formats"`
  MemberID *int64 `thrift:"member_id,5" db:"member_id" json:"member_id,omitempty"`
}

func NewUpdateAndProcessPrivacyImageParam() *UpdateAndProcessPrivacyImageParam {
  return &UpdateAndProcessPrivacyImageParam{}
}


func (p *UpdateAndProcessPrivacyImageParam) GetImageID() int64 {
  return p.ImageID
}

func (p *UpdateAndProcessPrivacyImageParam) GetImageUploadState() ImageUploadState {
  return p.ImageUploadState
}

func (p *UpdateAndProcessPrivacyImageParam) GetImageSpecs() []string {
  return p.ImageSpecs
}

func (p *UpdateAndProcessPrivacyImageParam) GetImageFormats() []string {
  return p.ImageFormats
}
var UpdateAndProcessPrivacyImageParam_MemberID_DEFAULT int64
func (p *UpdateAndProcessPrivacyImageParam) GetMemberID() int64 {
  if !p.IsSetMemberID() {
    return UpdateAndProcessPrivacyImageParam_MemberID_DEFAULT
  }
return *p.MemberID
}
func (p *UpdateAndProcessPrivacyImageParam) IsSetMemberID() bool {
  return p.MemberID != nil
}

func (p *UpdateAndProcessPrivacyImageParam) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetImageID bool = false;
  var issetImageUploadState bool = false;
  var issetImageSpecs bool = false;
  var issetImageFormats bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetImageID = true
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetImageUploadState = true
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetImageSpecs = true
    case 4:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetImageFormats = true
    case 5:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetImageID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ImageID is not set"));
  }
  if !issetImageUploadState{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ImageUploadState is not set"));
  }
  if !issetImageSpecs{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ImageSpecs is not set"));
  }
  if !issetImageFormats{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ImageFormats is not set"));
  }
  return nil
}

func (p *UpdateAndProcessPrivacyImageParam)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ImageID = v
}
  return nil
}

func (p *UpdateAndProcessPrivacyImageParam)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := ImageUploadState(v)
  p.ImageUploadState = temp
}
  return nil
}

func (p *UpdateAndProcessPrivacyImageParam)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.ImageSpecs =  tSlice
  for i := 0; i < size; i ++ {
var _elem6 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem6 = v
}
    p.ImageSpecs = append(p.ImageSpecs, _elem6)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *UpdateAndProcessPrivacyImageParam)  ReadField4(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.ImageFormats =  tSlice
  for i := 0; i < size; i ++ {
var _elem7 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem7 = v
}
    p.ImageFormats = append(p.ImageFormats, _elem7)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *UpdateAndProcessPrivacyImageParam)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.MemberID = &v
}
  return nil
}

func (p *UpdateAndProcessPrivacyImageParam) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("UpdateAndProcessPrivacyImageParam"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UpdateAndProcessPrivacyImageParam) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("image_id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:image_id: ", p), err) }
  if err := oprot.WriteI64(int64(p.ImageID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.image_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:image_id: ", p), err) }
  return err
}

func (p *UpdateAndProcessPrivacyImageParam) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("image_upload_state", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:image_upload_state: ", p), err) }
  if err := oprot.WriteI32(int32(p.ImageUploadState)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.image_upload_state (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:image_upload_state: ", p), err) }
  return err
}

func (p *UpdateAndProcessPrivacyImageParam) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("image_specs", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:image_specs: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.ImageSpecs)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.ImageSpecs {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:image_specs: ", p), err) }
  return err
}

func (p *UpdateAndProcessPrivacyImageParam) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("image_formats", thrift.LIST, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:image_formats: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.ImageFormats)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.ImageFormats {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:image_formats: ", p), err) }
  return err
}

func (p *UpdateAndProcessPrivacyImageParam) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetMemberID() {
    if err := oprot.WriteFieldBegin("member_id", thrift.I64, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:member_id: ", p), err) }
    if err := oprot.WriteI64(int64(*p.MemberID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.member_id (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:member_id: ", p), err) }
  }
  return err
}

func (p *UpdateAndProcessPrivacyImageParam) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UpdateAndProcessPrivacyImageParam(%+v)", *p)
}

// Attributes:
//  - ImageID
//  - State
type ImageUploadFileResult_ struct {
  ImageID string `thrift:"image_id,1,required" db:"image_id" json:"image_id"`
  State int16 `thrift:"state,2,required" db:"state" json:"state"`
}

func NewImageUploadFileResult_() *ImageUploadFileResult_ {
  return &ImageUploadFileResult_{}
}


func (p *ImageUploadFileResult_) GetImageID() string {
  return p.ImageID
}

func (p *ImageUploadFileResult_) GetState() int16 {
  return p.State
}
func (p *ImageUploadFileResult_) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetImageID bool = false;
  var issetState bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetImageID = true
    case 2:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetState = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetImageID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ImageID is not set"));
  }
  if !issetState{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field State is not set"));
  }
  return nil
}

func (p *ImageUploadFileResult_)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ImageID = v
}
  return nil
}

func (p *ImageUploadFileResult_)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.State = v
}
  return nil
}

func (p *ImageUploadFileResult_) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ImageUploadFileResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ImageUploadFileResult_) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("image_id", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:image_id: ", p), err) }
  if err := oprot.WriteString(string(p.ImageID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.image_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:image_id: ", p), err) }
  return err
}

func (p *ImageUploadFileResult_) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("state", thrift.I16, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:state: ", p), err) }
  if err := oprot.WriteI16(int16(p.State)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.state (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:state: ", p), err) }
  return err
}

func (p *ImageUploadFileResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ImageUploadFileResult_(%+v)", *p)
}

// Attributes:
//  - ImageID
//  - State
//  - ObjectKey
type PrivacyImageUploadFileResult_ struct {
  ImageID int64 `thrift:"image_id,1,required" db:"image_id" json:"image_id"`
  State int16 `thrift:"state,2,required" db:"state" json:"state"`
  ObjectKey string `thrift:"object_key,3,required" db:"object_key" json:"object_key"`
}

func NewPrivacyImageUploadFileResult_() *PrivacyImageUploadFileResult_ {
  return &PrivacyImageUploadFileResult_{}
}


func (p *PrivacyImageUploadFileResult_) GetImageID() int64 {
  return p.ImageID
}

func (p *PrivacyImageUploadFileResult_) GetState() int16 {
  return p.State
}

func (p *PrivacyImageUploadFileResult_) GetObjectKey() string {
  return p.ObjectKey
}
func (p *PrivacyImageUploadFileResult_) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetImageID bool = false;
  var issetState bool = false;
  var issetObjectKey bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetImageID = true
    case 2:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetState = true
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetObjectKey = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetImageID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ImageID is not set"));
  }
  if !issetState{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field State is not set"));
  }
  if !issetObjectKey{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ObjectKey is not set"));
  }
  return nil
}

func (p *PrivacyImageUploadFileResult_)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ImageID = v
}
  return nil
}

func (p *PrivacyImageUploadFileResult_)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.State = v
}
  return nil
}

func (p *PrivacyImageUploadFileResult_)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ObjectKey = v
}
  return nil
}

func (p *PrivacyImageUploadFileResult_) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("PrivacyImageUploadFileResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PrivacyImageUploadFileResult_) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("image_id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:image_id: ", p), err) }
  if err := oprot.WriteI64(int64(p.ImageID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.image_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:image_id: ", p), err) }
  return err
}

func (p *PrivacyImageUploadFileResult_) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("state", thrift.I16, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:state: ", p), err) }
  if err := oprot.WriteI16(int16(p.State)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.state (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:state: ", p), err) }
  return err
}

func (p *PrivacyImageUploadFileResult_) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("object_key", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:object_key: ", p), err) }
  if err := oprot.WriteString(string(p.ObjectKey)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.object_key (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:object_key: ", p), err) }
  return err
}

func (p *PrivacyImageUploadFileResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PrivacyImageUploadFileResult_(%+v)", *p)
}

// Attributes:
//  - AccessKey
//  - AccessSecret
//  - AccessToken
//  - AccessTimestamp
type UploadTokenObject struct {
  AccessKey string `thrift:"access_key,1,required" db:"access_key" json:"access_key"`
  AccessSecret string `thrift:"access_secret,2,required" db:"access_secret" json:"access_secret"`
  AccessToken string `thrift:"access_token,3,required" db:"access_token" json:"access_token"`
  AccessTimestamp *int64 `thrift:"access_timestamp,4" db:"access_timestamp" json:"access_timestamp,omitempty"`
}

func NewUploadTokenObject() *UploadTokenObject {
  return &UploadTokenObject{}
}


func (p *UploadTokenObject) GetAccessKey() string {
  return p.AccessKey
}

func (p *UploadTokenObject) GetAccessSecret() string {
  return p.AccessSecret
}

func (p *UploadTokenObject) GetAccessToken() string {
  return p.AccessToken
}
var UploadTokenObject_AccessTimestamp_DEFAULT int64
func (p *UploadTokenObject) GetAccessTimestamp() int64 {
  if !p.IsSetAccessTimestamp() {
    return UploadTokenObject_AccessTimestamp_DEFAULT
  }
return *p.AccessTimestamp
}
func (p *UploadTokenObject) IsSetAccessTimestamp() bool {
  return p.AccessTimestamp != nil
}

func (p *UploadTokenObject) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAccessKey bool = false;
  var issetAccessSecret bool = false;
  var issetAccessToken bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAccessKey = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAccessSecret = true
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAccessToken = true
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAccessKey{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AccessKey is not set"));
  }
  if !issetAccessSecret{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AccessSecret is not set"));
  }
  if !issetAccessToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AccessToken is not set"));
  }
  return nil
}

func (p *UploadTokenObject)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.AccessKey = v
}
  return nil
}

func (p *UploadTokenObject)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.AccessSecret = v
}
  return nil
}

func (p *UploadTokenObject)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.AccessToken = v
}
  return nil
}

func (p *UploadTokenObject)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.AccessTimestamp = &v
}
  return nil
}

func (p *UploadTokenObject) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("UploadTokenObject"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UploadTokenObject) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("access_key", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:access_key: ", p), err) }
  if err := oprot.WriteString(string(p.AccessKey)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.access_key (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:access_key: ", p), err) }
  return err
}

func (p *UploadTokenObject) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("access_secret", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:access_secret: ", p), err) }
  if err := oprot.WriteString(string(p.AccessSecret)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.access_secret (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:access_secret: ", p), err) }
  return err
}

func (p *UploadTokenObject) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("access_token", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:access_token: ", p), err) }
  if err := oprot.WriteString(string(p.AccessToken)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.access_token (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:access_token: ", p), err) }
  return err
}

func (p *UploadTokenObject) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAccessTimestamp() {
    if err := oprot.WriteFieldBegin("access_timestamp", thrift.I64, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:access_timestamp: ", p), err) }
    if err := oprot.WriteI64(int64(*p.AccessTimestamp)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.access_timestamp (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:access_timestamp: ", p), err) }
  }
  return err
}

func (p *UploadTokenObject) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UploadTokenObject(%+v)", *p)
}

// Attributes:
//  - Endpoint
//  - BucketName
type OSSBucketObject struct {
  Endpoint string `thrift:"endpoint,1,required" db:"endpoint" json:"endpoint"`
  BucketName string `thrift:"bucket_name,2,required" db:"bucket_name" json:"bucket_name"`
}

func NewOSSBucketObject() *OSSBucketObject {
  return &OSSBucketObject{}
}


func (p *OSSBucketObject) GetEndpoint() string {
  return p.Endpoint
}

func (p *OSSBucketObject) GetBucketName() string {
  return p.BucketName
}
func (p *OSSBucketObject) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetEndpoint bool = false;
  var issetBucketName bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetEndpoint = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetBucketName = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetEndpoint{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Endpoint is not set"));
  }
  if !issetBucketName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field BucketName is not set"));
  }
  return nil
}

func (p *OSSBucketObject)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Endpoint = v
}
  return nil
}

func (p *OSSBucketObject)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.BucketName = v
}
  return nil
}

func (p *OSSBucketObject) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("OSSBucketObject"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OSSBucketObject) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("endpoint", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:endpoint: ", p), err) }
  if err := oprot.WriteString(string(p.Endpoint)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.endpoint (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:endpoint: ", p), err) }
  return err
}

func (p *OSSBucketObject) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("bucket_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:bucket_name: ", p), err) }
  if err := oprot.WriteString(string(p.BucketName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bucket_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:bucket_name: ", p), err) }
  return err
}

func (p *OSSBucketObject) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OSSBucketObject(%+v)", *p)
}

// Attributes:
//  - UploadFile
//  - ImageMeta
//  - UploadToken
//  - Bucket
type ImageUploadResult_ struct {
  UploadFile *ImageUploadFileResult_ `thrift:"upload_file,1,required" db:"upload_file" json:"upload_file"`
  ImageMeta *ImageMeta `thrift:"image_meta,2,required" db:"image_meta" json:"image_meta"`
  UploadToken *UploadTokenObject `thrift:"upload_token,3" db:"upload_token" json:"upload_token,omitempty"`
  Bucket *OSSBucketObject `thrift:"bucket,4" db:"bucket" json:"bucket,omitempty"`
}

func NewImageUploadResult_() *ImageUploadResult_ {
  return &ImageUploadResult_{}
}

var ImageUploadResult__UploadFile_DEFAULT *ImageUploadFileResult_
func (p *ImageUploadResult_) GetUploadFile() *ImageUploadFileResult_ {
  if !p.IsSetUploadFile() {
    return ImageUploadResult__UploadFile_DEFAULT
  }
return p.UploadFile
}
var ImageUploadResult__ImageMeta_DEFAULT *ImageMeta
func (p *ImageUploadResult_) GetImageMeta() *ImageMeta {
  if !p.IsSetImageMeta() {
    return ImageUploadResult__ImageMeta_DEFAULT
  }
return p.ImageMeta
}
var ImageUploadResult__UploadToken_DEFAULT *UploadTokenObject
func (p *ImageUploadResult_) GetUploadToken() *UploadTokenObject {
  if !p.IsSetUploadToken() {
    return ImageUploadResult__UploadToken_DEFAULT
  }
return p.UploadToken
}
var ImageUploadResult__Bucket_DEFAULT *OSSBucketObject
func (p *ImageUploadResult_) GetBucket() *OSSBucketObject {
  if !p.IsSetBucket() {
    return ImageUploadResult__Bucket_DEFAULT
  }
return p.Bucket
}
func (p *ImageUploadResult_) IsSetUploadFile() bool {
  return p.UploadFile != nil
}

func (p *ImageUploadResult_) IsSetImageMeta() bool {
  return p.ImageMeta != nil
}

func (p *ImageUploadResult_) IsSetUploadToken() bool {
  return p.UploadToken != nil
}

func (p *ImageUploadResult_) IsSetBucket() bool {
  return p.Bucket != nil
}

func (p *ImageUploadResult_) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetUploadFile bool = false;
  var issetImageMeta bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetUploadFile = true
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetImageMeta = true
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetUploadFile{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UploadFile is not set"));
  }
  if !issetImageMeta{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ImageMeta is not set"));
  }
  return nil
}

func (p *ImageUploadResult_)  ReadField1(iprot thrift.TProtocol) error {
  p.UploadFile = &ImageUploadFileResult_{}
  if err := p.UploadFile.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UploadFile), err)
  }
  return nil
}

func (p *ImageUploadResult_)  ReadField2(iprot thrift.TProtocol) error {
  p.ImageMeta = &ImageMeta{}
  if err := p.ImageMeta.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ImageMeta), err)
  }
  return nil
}

func (p *ImageUploadResult_)  ReadField3(iprot thrift.TProtocol) error {
  p.UploadToken = &UploadTokenObject{}
  if err := p.UploadToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UploadToken), err)
  }
  return nil
}

func (p *ImageUploadResult_)  ReadField4(iprot thrift.TProtocol) error {
  p.Bucket = &OSSBucketObject{}
  if err := p.Bucket.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Bucket), err)
  }
  return nil
}

func (p *ImageUploadResult_) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ImageUploadResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ImageUploadResult_) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("upload_file", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:upload_file: ", p), err) }
  if err := p.UploadFile.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UploadFile), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:upload_file: ", p), err) }
  return err
}

func (p *ImageUploadResult_) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("image_meta", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:image_meta: ", p), err) }
  if err := p.ImageMeta.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ImageMeta), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:image_meta: ", p), err) }
  return err
}

func (p *ImageUploadResult_) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetUploadToken() {
    if err := oprot.WriteFieldBegin("upload_token", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:upload_token: ", p), err) }
    if err := p.UploadToken.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UploadToken), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:upload_token: ", p), err) }
  }
  return err
}

func (p *ImageUploadResult_) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetBucket() {
    if err := oprot.WriteFieldBegin("bucket", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:bucket: ", p), err) }
    if err := p.Bucket.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Bucket), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:bucket: ", p), err) }
  }
  return err
}

func (p *ImageUploadResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ImageUploadResult_(%+v)", *p)
}

// Attributes:
//  - IsUpdated
//  - ImageMeta
type UpdateImageStateResult_ struct {
  IsUpdated bool `thrift:"is_updated,1,required" db:"is_updated" json:"is_updated"`
  ImageMeta *ImageMeta `thrift:"image_meta,2" db:"image_meta" json:"image_meta,omitempty"`
}

func NewUpdateImageStateResult_() *UpdateImageStateResult_ {
  return &UpdateImageStateResult_{}
}


func (p *UpdateImageStateResult_) GetIsUpdated() bool {
  return p.IsUpdated
}
var UpdateImageStateResult__ImageMeta_DEFAULT *ImageMeta
func (p *UpdateImageStateResult_) GetImageMeta() *ImageMeta {
  if !p.IsSetImageMeta() {
    return UpdateImageStateResult__ImageMeta_DEFAULT
  }
return p.ImageMeta
}
func (p *UpdateImageStateResult_) IsSetImageMeta() bool {
  return p.ImageMeta != nil
}

func (p *UpdateImageStateResult_) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetIsUpdated bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetIsUpdated = true
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetIsUpdated{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field IsUpdated is not set"));
  }
  return nil
}

func (p *UpdateImageStateResult_)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.IsUpdated = v
}
  return nil
}

func (p *UpdateImageStateResult_)  ReadField2(iprot thrift.TProtocol) error {
  p.ImageMeta = &ImageMeta{}
  if err := p.ImageMeta.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ImageMeta), err)
  }
  return nil
}

func (p *UpdateImageStateResult_) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("UpdateImageStateResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UpdateImageStateResult_) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("is_updated", thrift.BOOL, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:is_updated: ", p), err) }
  if err := oprot.WriteBool(bool(p.IsUpdated)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.is_updated (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:is_updated: ", p), err) }
  return err
}

func (p *UpdateImageStateResult_) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetImageMeta() {
    if err := oprot.WriteFieldBegin("image_meta", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:image_meta: ", p), err) }
    if err := p.ImageMeta.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ImageMeta), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:image_meta: ", p), err) }
  }
  return err
}

func (p *UpdateImageStateResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UpdateImageStateResult_(%+v)", *p)
}

// Attributes:
//  - IsUpdated
//  - ImageMeta
type UpdatePrivacyImageStateResult_ struct {
  IsUpdated bool `thrift:"is_updated,1,required" db:"is_updated" json:"is_updated"`
  ImageMeta *ImageMeta `thrift:"image_meta,2" db:"image_meta" json:"image_meta,omitempty"`
}

func NewUpdatePrivacyImageStateResult_() *UpdatePrivacyImageStateResult_ {
  return &UpdatePrivacyImageStateResult_{}
}


func (p *UpdatePrivacyImageStateResult_) GetIsUpdated() bool {
  return p.IsUpdated
}
var UpdatePrivacyImageStateResult__ImageMeta_DEFAULT *ImageMeta
func (p *UpdatePrivacyImageStateResult_) GetImageMeta() *ImageMeta {
  if !p.IsSetImageMeta() {
    return UpdatePrivacyImageStateResult__ImageMeta_DEFAULT
  }
return p.ImageMeta
}
func (p *UpdatePrivacyImageStateResult_) IsSetImageMeta() bool {
  return p.ImageMeta != nil
}

func (p *UpdatePrivacyImageStateResult_) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetIsUpdated bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetIsUpdated = true
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetIsUpdated{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field IsUpdated is not set"));
  }
  return nil
}

func (p *UpdatePrivacyImageStateResult_)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.IsUpdated = v
}
  return nil
}

func (p *UpdatePrivacyImageStateResult_)  ReadField2(iprot thrift.TProtocol) error {
  p.ImageMeta = &ImageMeta{}
  if err := p.ImageMeta.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ImageMeta), err)
  }
  return nil
}

func (p *UpdatePrivacyImageStateResult_) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("UpdatePrivacyImageStateResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UpdatePrivacyImageStateResult_) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("is_updated", thrift.BOOL, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:is_updated: ", p), err) }
  if err := oprot.WriteBool(bool(p.IsUpdated)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.is_updated (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:is_updated: ", p), err) }
  return err
}

func (p *UpdatePrivacyImageStateResult_) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetImageMeta() {
    if err := oprot.WriteFieldBegin("image_meta", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:image_meta: ", p), err) }
    if err := p.ImageMeta.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ImageMeta), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:image_meta: ", p), err) }
  }
  return err
}

func (p *UpdatePrivacyImageStateResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UpdatePrivacyImageStateResult_(%+v)", *p)
}

// Attributes:
//  - UploadFile
//  - ImageMeta
//  - UploadToken
//  - Bucket
type PrivacyImageUploadResult_ struct {
  UploadFile *PrivacyImageUploadFileResult_ `thrift:"upload_file,1,required" db:"upload_file" json:"upload_file"`
  ImageMeta *ImageMeta `thrift:"image_meta,2" db:"image_meta" json:"image_meta,omitempty"`
  UploadToken *UploadTokenObject `thrift:"upload_token,3" db:"upload_token" json:"upload_token,omitempty"`
  Bucket *OSSBucketObject `thrift:"bucket,4" db:"bucket" json:"bucket,omitempty"`
}

func NewPrivacyImageUploadResult_() *PrivacyImageUploadResult_ {
  return &PrivacyImageUploadResult_{}
}

var PrivacyImageUploadResult__UploadFile_DEFAULT *PrivacyImageUploadFileResult_
func (p *PrivacyImageUploadResult_) GetUploadFile() *PrivacyImageUploadFileResult_ {
  if !p.IsSetUploadFile() {
    return PrivacyImageUploadResult__UploadFile_DEFAULT
  }
return p.UploadFile
}
var PrivacyImageUploadResult__ImageMeta_DEFAULT *ImageMeta
func (p *PrivacyImageUploadResult_) GetImageMeta() *ImageMeta {
  if !p.IsSetImageMeta() {
    return PrivacyImageUploadResult__ImageMeta_DEFAULT
  }
return p.ImageMeta
}
var PrivacyImageUploadResult__UploadToken_DEFAULT *UploadTokenObject
func (p *PrivacyImageUploadResult_) GetUploadToken() *UploadTokenObject {
  if !p.IsSetUploadToken() {
    return PrivacyImageUploadResult__UploadToken_DEFAULT
  }
return p.UploadToken
}
var PrivacyImageUploadResult__Bucket_DEFAULT *OSSBucketObject
func (p *PrivacyImageUploadResult_) GetBucket() *OSSBucketObject {
  if !p.IsSetBucket() {
    return PrivacyImageUploadResult__Bucket_DEFAULT
  }
return p.Bucket
}
func (p *PrivacyImageUploadResult_) IsSetUploadFile() bool {
  return p.UploadFile != nil
}

func (p *PrivacyImageUploadResult_) IsSetImageMeta() bool {
  return p.ImageMeta != nil
}

func (p *PrivacyImageUploadResult_) IsSetUploadToken() bool {
  return p.UploadToken != nil
}

func (p *PrivacyImageUploadResult_) IsSetBucket() bool {
  return p.Bucket != nil
}

func (p *PrivacyImageUploadResult_) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetUploadFile bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetUploadFile = true
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetUploadFile{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UploadFile is not set"));
  }
  return nil
}

func (p *PrivacyImageUploadResult_)  ReadField1(iprot thrift.TProtocol) error {
  p.UploadFile = &PrivacyImageUploadFileResult_{}
  if err := p.UploadFile.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UploadFile), err)
  }
  return nil
}

func (p *PrivacyImageUploadResult_)  ReadField2(iprot thrift.TProtocol) error {
  p.ImageMeta = &ImageMeta{}
  if err := p.ImageMeta.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ImageMeta), err)
  }
  return nil
}

func (p *PrivacyImageUploadResult_)  ReadField3(iprot thrift.TProtocol) error {
  p.UploadToken = &UploadTokenObject{}
  if err := p.UploadToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UploadToken), err)
  }
  return nil
}

func (p *PrivacyImageUploadResult_)  ReadField4(iprot thrift.TProtocol) error {
  p.Bucket = &OSSBucketObject{}
  if err := p.Bucket.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Bucket), err)
  }
  return nil
}

func (p *PrivacyImageUploadResult_) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("PrivacyImageUploadResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PrivacyImageUploadResult_) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("upload_file", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:upload_file: ", p), err) }
  if err := p.UploadFile.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UploadFile), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:upload_file: ", p), err) }
  return err
}

func (p *PrivacyImageUploadResult_) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetImageMeta() {
    if err := oprot.WriteFieldBegin("image_meta", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:image_meta: ", p), err) }
    if err := p.ImageMeta.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ImageMeta), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:image_meta: ", p), err) }
  }
  return err
}

func (p *PrivacyImageUploadResult_) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetUploadToken() {
    if err := oprot.WriteFieldBegin("upload_token", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:upload_token: ", p), err) }
    if err := p.UploadToken.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UploadToken), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:upload_token: ", p), err) }
  }
  return err
}

func (p *PrivacyImageUploadResult_) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetBucket() {
    if err := oprot.WriteFieldBegin("bucket", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:bucket: ", p), err) }
    if err := p.Bucket.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Bucket), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:bucket: ", p), err) }
  }
  return err
}

func (p *PrivacyImageUploadResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PrivacyImageUploadResult_(%+v)", *p)
}

// Attributes:
//  - ImageHash
//  - ImageFormat
//  - ImageSpecs
//  - ImageFormats
//  - Source
//  - MemberID
type GetPrivacyUploadParam struct {
  ImageHash string `thrift:"image_hash,1,required" db:"image_hash" json:"image_hash"`
  ImageFormat string `thrift:"image_format,2,required" db:"image_format" json:"image_format"`
  ImageSpecs []string `thrift:"image_specs,3,required" db:"image_specs" json:"image_specs"`
  ImageFormats []string `thrift:"image_formats,4,required" db:"image_formats" json:"image_formats"`
  Source string `thrift:"source,5,required" db:"source" json:"source"`
  MemberID *int64 `thrift:"member_id,6" db:"member_id" json:"member_id,omitempty"`
}

func NewGetPrivacyUploadParam() *GetPrivacyUploadParam {
  return &GetPrivacyUploadParam{}
}


func (p *GetPrivacyUploadParam) GetImageHash() string {
  return p.ImageHash
}

func (p *GetPrivacyUploadParam) GetImageFormat() string {
  return p.ImageFormat
}

func (p *GetPrivacyUploadParam) GetImageSpecs() []string {
  return p.ImageSpecs
}

func (p *GetPrivacyUploadParam) GetImageFormats() []string {
  return p.ImageFormats
}

func (p *GetPrivacyUploadParam) GetSource() string {
  return p.Source
}
var GetPrivacyUploadParam_MemberID_DEFAULT int64
func (p *GetPrivacyUploadParam) GetMemberID() int64 {
  if !p.IsSetMemberID() {
    return GetPrivacyUploadParam_MemberID_DEFAULT
  }
return *p.MemberID
}
func (p *GetPrivacyUploadParam) IsSetMemberID() bool {
  return p.MemberID != nil
}

func (p *GetPrivacyUploadParam) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetImageHash bool = false;
  var issetImageFormat bool = false;
  var issetImageSpecs bool = false;
  var issetImageFormats bool = false;
  var issetSource bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetImageHash = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetImageFormat = true
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetImageSpecs = true
    case 4:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetImageFormats = true
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetSource = true
    case 6:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetImageHash{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ImageHash is not set"));
  }
  if !issetImageFormat{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ImageFormat is not set"));
  }
  if !issetImageSpecs{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ImageSpecs is not set"));
  }
  if !issetImageFormats{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ImageFormats is not set"));
  }
  if !issetSource{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Source is not set"));
  }
  return nil
}

func (p *GetPrivacyUploadParam)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ImageHash = v
}
  return nil
}

func (p *GetPrivacyUploadParam)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ImageFormat = v
}
  return nil
}

func (p *GetPrivacyUploadParam)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.ImageSpecs =  tSlice
  for i := 0; i < size; i ++ {
var _elem8 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem8 = v
}
    p.ImageSpecs = append(p.ImageSpecs, _elem8)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *GetPrivacyUploadParam)  ReadField4(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.ImageFormats =  tSlice
  for i := 0; i < size; i ++ {
var _elem9 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem9 = v
}
    p.ImageFormats = append(p.ImageFormats, _elem9)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *GetPrivacyUploadParam)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Source = v
}
  return nil
}

func (p *GetPrivacyUploadParam)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.MemberID = &v
}
  return nil
}

func (p *GetPrivacyUploadParam) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetPrivacyUploadParam"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetPrivacyUploadParam) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("image_hash", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:image_hash: ", p), err) }
  if err := oprot.WriteString(string(p.ImageHash)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.image_hash (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:image_hash: ", p), err) }
  return err
}

func (p *GetPrivacyUploadParam) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("image_format", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:image_format: ", p), err) }
  if err := oprot.WriteString(string(p.ImageFormat)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.image_format (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:image_format: ", p), err) }
  return err
}

func (p *GetPrivacyUploadParam) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("image_specs", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:image_specs: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.ImageSpecs)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.ImageSpecs {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:image_specs: ", p), err) }
  return err
}

func (p *GetPrivacyUploadParam) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("image_formats", thrift.LIST, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:image_formats: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.ImageFormats)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.ImageFormats {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:image_formats: ", p), err) }
  return err
}

func (p *GetPrivacyUploadParam) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("source", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:source: ", p), err) }
  if err := oprot.WriteString(string(p.Source)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.source (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:source: ", p), err) }
  return err
}

func (p *GetPrivacyUploadParam) writeField6(oprot thrift.TProtocol) (err error) {
  if p.IsSetMemberID() {
    if err := oprot.WriteFieldBegin("member_id", thrift.I64, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:member_id: ", p), err) }
    if err := oprot.WriteI64(int64(*p.MemberID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.member_id (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:member_id: ", p), err) }
  }
  return err
}

func (p *GetPrivacyUploadParam) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetPrivacyUploadParam(%+v)", *p)
}

// Attributes:
//  - URL
//  - Spec
//  - Format
//  - Height
//  - Width
//  - Size
type PrivacyImageObject struct {
  URL string `thrift:"url,1,required" db:"url" json:"url"`
  Spec string `thrift:"spec,2,required" db:"spec" json:"spec"`
  Format string `thrift:"format,3,required" db:"format" json:"format"`
  Height *int32 `thrift:"height,4" db:"height" json:"height,omitempty"`
  Width *int32 `thrift:"width,5" db:"width" json:"width,omitempty"`
  Size *int64 `thrift:"size,6" db:"size" json:"size,omitempty"`
}

func NewPrivacyImageObject() *PrivacyImageObject {
  return &PrivacyImageObject{}
}


func (p *PrivacyImageObject) GetURL() string {
  return p.URL
}

func (p *PrivacyImageObject) GetSpec() string {
  return p.Spec
}

func (p *PrivacyImageObject) GetFormat() string {
  return p.Format
}
var PrivacyImageObject_Height_DEFAULT int32
func (p *PrivacyImageObject) GetHeight() int32 {
  if !p.IsSetHeight() {
    return PrivacyImageObject_Height_DEFAULT
  }
return *p.Height
}
var PrivacyImageObject_Width_DEFAULT int32
func (p *PrivacyImageObject) GetWidth() int32 {
  if !p.IsSetWidth() {
    return PrivacyImageObject_Width_DEFAULT
  }
return *p.Width
}
var PrivacyImageObject_Size_DEFAULT int64
func (p *PrivacyImageObject) GetSize() int64 {
  if !p.IsSetSize() {
    return PrivacyImageObject_Size_DEFAULT
  }
return *p.Size
}
func (p *PrivacyImageObject) IsSetHeight() bool {
  return p.Height != nil
}

func (p *PrivacyImageObject) IsSetWidth() bool {
  return p.Width != nil
}

func (p *PrivacyImageObject) IsSetSize() bool {
  return p.Size != nil
}

func (p *PrivacyImageObject) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetURL bool = false;
  var issetSpec bool = false;
  var issetFormat bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetURL = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetSpec = true
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetFormat = true
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetURL{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field URL is not set"));
  }
  if !issetSpec{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Spec is not set"));
  }
  if !issetFormat{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Format is not set"));
  }
  return nil
}

func (p *PrivacyImageObject)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.URL = v
}
  return nil
}

func (p *PrivacyImageObject)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Spec = v
}
  return nil
}

func (p *PrivacyImageObject)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Format = v
}
  return nil
}

func (p *PrivacyImageObject)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Height = &v
}
  return nil
}

func (p *PrivacyImageObject)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Width = &v
}
  return nil
}

func (p *PrivacyImageObject)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Size = &v
}
  return nil
}

func (p *PrivacyImageObject) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("PrivacyImageObject"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PrivacyImageObject) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("url", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:url: ", p), err) }
  if err := oprot.WriteString(string(p.URL)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.url (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:url: ", p), err) }
  return err
}

func (p *PrivacyImageObject) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("spec", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:spec: ", p), err) }
  if err := oprot.WriteString(string(p.Spec)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.spec (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:spec: ", p), err) }
  return err
}

func (p *PrivacyImageObject) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("format", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:format: ", p), err) }
  if err := oprot.WriteString(string(p.Format)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.format (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:format: ", p), err) }
  return err
}

func (p *PrivacyImageObject) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetHeight() {
    if err := oprot.WriteFieldBegin("height", thrift.I32, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:height: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Height)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.height (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:height: ", p), err) }
  }
  return err
}

func (p *PrivacyImageObject) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetWidth() {
    if err := oprot.WriteFieldBegin("width", thrift.I32, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:width: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Width)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.width (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:width: ", p), err) }
  }
  return err
}

func (p *PrivacyImageObject) writeField6(oprot thrift.TProtocol) (err error) {
  if p.IsSetSize() {
    if err := oprot.WriteFieldBegin("size", thrift.I64, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:size: ", p), err) }
    if err := oprot.WriteI64(int64(*p.Size)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.size (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:size: ", p), err) }
  }
  return err
}

func (p *PrivacyImageObject) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PrivacyImageObject(%+v)", *p)
}

// Attributes:
//  - ImageIds
//  - MemberHashID
//  - UserIP
//  - ImageSpec
//  - ImageFormat
//  - IsFilterOrigin
type BatchPrivacyImageUrlParam struct {
  ImageIds []int64 `thrift:"image_ids,1,required" db:"image_ids" json:"image_ids"`
  MemberHashID string `thrift:"member_hash_id,2,required" db:"member_hash_id" json:"member_hash_id"`
  UserIP string `thrift:"user_ip,3,required" db:"user_ip" json:"user_ip"`
  ImageSpec *string `thrift:"image_spec,4" db:"image_spec" json:"image_spec,omitempty"`
  ImageFormat *string `thrift:"image_format,5" db:"image_format" json:"image_format,omitempty"`
  IsFilterOrigin bool `thrift:"is_filter_origin,6" db:"is_filter_origin" json:"is_filter_origin,omitempty"`
}

func NewBatchPrivacyImageUrlParam() *BatchPrivacyImageUrlParam {
  return &BatchPrivacyImageUrlParam{
IsFilterOrigin: true,
}
}


func (p *BatchPrivacyImageUrlParam) GetImageIds() []int64 {
  return p.ImageIds
}

func (p *BatchPrivacyImageUrlParam) GetMemberHashID() string {
  return p.MemberHashID
}

func (p *BatchPrivacyImageUrlParam) GetUserIP() string {
  return p.UserIP
}
var BatchPrivacyImageUrlParam_ImageSpec_DEFAULT string
func (p *BatchPrivacyImageUrlParam) GetImageSpec() string {
  if !p.IsSetImageSpec() {
    return BatchPrivacyImageUrlParam_ImageSpec_DEFAULT
  }
return *p.ImageSpec
}
var BatchPrivacyImageUrlParam_ImageFormat_DEFAULT string
func (p *BatchPrivacyImageUrlParam) GetImageFormat() string {
  if !p.IsSetImageFormat() {
    return BatchPrivacyImageUrlParam_ImageFormat_DEFAULT
  }
return *p.ImageFormat
}
var BatchPrivacyImageUrlParam_IsFilterOrigin_DEFAULT bool = true

func (p *BatchPrivacyImageUrlParam) GetIsFilterOrigin() bool {
  return p.IsFilterOrigin
}
func (p *BatchPrivacyImageUrlParam) IsSetImageSpec() bool {
  return p.ImageSpec != nil
}

func (p *BatchPrivacyImageUrlParam) IsSetImageFormat() bool {
  return p.ImageFormat != nil
}

func (p *BatchPrivacyImageUrlParam) IsSetIsFilterOrigin() bool {
  return p.IsFilterOrigin != BatchPrivacyImageUrlParam_IsFilterOrigin_DEFAULT
}

func (p *BatchPrivacyImageUrlParam) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetImageIds bool = false;
  var issetMemberHashID bool = false;
  var issetUserIP bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetImageIds = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetMemberHashID = true
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetUserIP = true
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetImageIds{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ImageIds is not set"));
  }
  if !issetMemberHashID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field MemberHashID is not set"));
  }
  if !issetUserIP{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UserIP is not set"));
  }
  return nil
}

func (p *BatchPrivacyImageUrlParam)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int64, 0, size)
  p.ImageIds =  tSlice
  for i := 0; i < size; i ++ {
var _elem10 int64
    if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem10 = v
}
    p.ImageIds = append(p.ImageIds, _elem10)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *BatchPrivacyImageUrlParam)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.MemberHashID = v
}
  return nil
}

func (p *BatchPrivacyImageUrlParam)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.UserIP = v
}
  return nil
}

func (p *BatchPrivacyImageUrlParam)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.ImageSpec = &v
}
  return nil
}

func (p *BatchPrivacyImageUrlParam)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.ImageFormat = &v
}
  return nil
}

func (p *BatchPrivacyImageUrlParam)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.IsFilterOrigin = v
}
  return nil
}

func (p *BatchPrivacyImageUrlParam) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("BatchPrivacyImageUrlParam"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BatchPrivacyImageUrlParam) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("image_ids", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:image_ids: ", p), err) }
  if err := oprot.WriteListBegin(thrift.I64, len(p.ImageIds)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.ImageIds {
    if err := oprot.WriteI64(int64(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:image_ids: ", p), err) }
  return err
}

func (p *BatchPrivacyImageUrlParam) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("member_hash_id", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:member_hash_id: ", p), err) }
  if err := oprot.WriteString(string(p.MemberHashID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.member_hash_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:member_hash_id: ", p), err) }
  return err
}

func (p *BatchPrivacyImageUrlParam) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("user_ip", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:user_ip: ", p), err) }
  if err := oprot.WriteString(string(p.UserIP)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user_ip (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:user_ip: ", p), err) }
  return err
}

func (p *BatchPrivacyImageUrlParam) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetImageSpec() {
    if err := oprot.WriteFieldBegin("image_spec", thrift.STRING, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:image_spec: ", p), err) }
    if err := oprot.WriteString(string(*p.ImageSpec)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.image_spec (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:image_spec: ", p), err) }
  }
  return err
}

func (p *BatchPrivacyImageUrlParam) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetImageFormat() {
    if err := oprot.WriteFieldBegin("image_format", thrift.STRING, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:image_format: ", p), err) }
    if err := oprot.WriteString(string(*p.ImageFormat)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.image_format (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:image_format: ", p), err) }
  }
  return err
}

func (p *BatchPrivacyImageUrlParam) writeField6(oprot thrift.TProtocol) (err error) {
  if p.IsSetIsFilterOrigin() {
    if err := oprot.WriteFieldBegin("is_filter_origin", thrift.BOOL, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:is_filter_origin: ", p), err) }
    if err := oprot.WriteBool(bool(p.IsFilterOrigin)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.is_filter_origin (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:is_filter_origin: ", p), err) }
  }
  return err
}

func (p *BatchPrivacyImageUrlParam) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BatchPrivacyImageUrlParam(%+v)", *p)
}

// Attributes:
//  - VersionID
//  - AppName
//  - PierVersion
//  - AppLocalIP
//  - Domains
//  - UserIP
type ScheduleStrategyParam struct {
  VersionID int64 `thrift:"version_id,1,required" db:"version_id" json:"version_id"`
  AppName string `thrift:"app_name,2,required" db:"app_name" json:"app_name"`
  PierVersion string `thrift:"pier_version,3,required" db:"pier_version" json:"pier_version"`
  AppLocalIP *string `thrift:"app_local_ip,4" db:"app_local_ip" json:"app_local_ip,omitempty"`
  Domains []string `thrift:"domains,5" db:"domains" json:"domains,omitempty"`
  UserIP *string `thrift:"user_ip,6" db:"user_ip" json:"user_ip,omitempty"`
}

func NewScheduleStrategyParam() *ScheduleStrategyParam {
  return &ScheduleStrategyParam{}
}


func (p *ScheduleStrategyParam) GetVersionID() int64 {
  return p.VersionID
}

func (p *ScheduleStrategyParam) GetAppName() string {
  return p.AppName
}

func (p *ScheduleStrategyParam) GetPierVersion() string {
  return p.PierVersion
}
var ScheduleStrategyParam_AppLocalIP_DEFAULT string
func (p *ScheduleStrategyParam) GetAppLocalIP() string {
  if !p.IsSetAppLocalIP() {
    return ScheduleStrategyParam_AppLocalIP_DEFAULT
  }
return *p.AppLocalIP
}
var ScheduleStrategyParam_Domains_DEFAULT []string

func (p *ScheduleStrategyParam) GetDomains() []string {
  return p.Domains
}
var ScheduleStrategyParam_UserIP_DEFAULT string
func (p *ScheduleStrategyParam) GetUserIP() string {
  if !p.IsSetUserIP() {
    return ScheduleStrategyParam_UserIP_DEFAULT
  }
return *p.UserIP
}
func (p *ScheduleStrategyParam) IsSetAppLocalIP() bool {
  return p.AppLocalIP != nil
}

func (p *ScheduleStrategyParam) IsSetDomains() bool {
  return p.Domains != nil
}

func (p *ScheduleStrategyParam) IsSetUserIP() bool {
  return p.UserIP != nil
}

func (p *ScheduleStrategyParam) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetVersionID bool = false;
  var issetAppName bool = false;
  var issetPierVersion bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetVersionID = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAppName = true
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetPierVersion = true
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetVersionID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field VersionID is not set"));
  }
  if !issetAppName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AppName is not set"));
  }
  if !issetPierVersion{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field PierVersion is not set"));
  }
  return nil
}

func (p *ScheduleStrategyParam)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.VersionID = v
}
  return nil
}

func (p *ScheduleStrategyParam)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.AppName = v
}
  return nil
}

func (p *ScheduleStrategyParam)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.PierVersion = v
}
  return nil
}

func (p *ScheduleStrategyParam)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.AppLocalIP = &v
}
  return nil
}

func (p *ScheduleStrategyParam)  ReadField5(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Domains =  tSlice
  for i := 0; i < size; i ++ {
var _elem11 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem11 = v
}
    p.Domains = append(p.Domains, _elem11)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ScheduleStrategyParam)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.UserIP = &v
}
  return nil
}

func (p *ScheduleStrategyParam) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ScheduleStrategyParam"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ScheduleStrategyParam) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("version_id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:version_id: ", p), err) }
  if err := oprot.WriteI64(int64(p.VersionID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.version_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:version_id: ", p), err) }
  return err
}

func (p *ScheduleStrategyParam) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("app_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:app_name: ", p), err) }
  if err := oprot.WriteString(string(p.AppName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.app_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:app_name: ", p), err) }
  return err
}

func (p *ScheduleStrategyParam) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("pier_version", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:pier_version: ", p), err) }
  if err := oprot.WriteString(string(p.PierVersion)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.pier_version (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:pier_version: ", p), err) }
  return err
}

func (p *ScheduleStrategyParam) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAppLocalIP() {
    if err := oprot.WriteFieldBegin("app_local_ip", thrift.STRING, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:app_local_ip: ", p), err) }
    if err := oprot.WriteString(string(*p.AppLocalIP)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.app_local_ip (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:app_local_ip: ", p), err) }
  }
  return err
}

func (p *ScheduleStrategyParam) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetDomains() {
    if err := oprot.WriteFieldBegin("domains", thrift.LIST, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:domains: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.Domains)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Domains {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:domains: ", p), err) }
  }
  return err
}

func (p *ScheduleStrategyParam) writeField6(oprot thrift.TProtocol) (err error) {
  if p.IsSetUserIP() {
    if err := oprot.WriteFieldBegin("user_ip", thrift.STRING, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:user_ip: ", p), err) }
    if err := oprot.WriteString(string(*p.UserIP)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.user_ip (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:user_ip: ", p), err) }
  }
  return err
}

func (p *ScheduleStrategyParam) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ScheduleStrategyParam(%+v)", *p)
}

// Attributes:
//  - Domain
//  - Weight
//  - Regions
type CDNDomainObject struct {
  Domain string `thrift:"domain,1,required" db:"domain" json:"domain"`
  Weight int16 `thrift:"weight,2,required" db:"weight" json:"weight"`
  Regions []string `thrift:"regions,3" db:"regions" json:"regions,omitempty"`
}

func NewCDNDomainObject() *CDNDomainObject {
  return &CDNDomainObject{}
}


func (p *CDNDomainObject) GetDomain() string {
  return p.Domain
}

func (p *CDNDomainObject) GetWeight() int16 {
  return p.Weight
}
var CDNDomainObject_Regions_DEFAULT []string

func (p *CDNDomainObject) GetRegions() []string {
  return p.Regions
}
func (p *CDNDomainObject) IsSetRegions() bool {
  return p.Regions != nil
}

func (p *CDNDomainObject) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetDomain bool = false;
  var issetWeight bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetDomain = true
    case 2:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetWeight = true
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetDomain{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Domain is not set"));
  }
  if !issetWeight{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Weight is not set"));
  }
  return nil
}

func (p *CDNDomainObject)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Domain = v
}
  return nil
}

func (p *CDNDomainObject)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Weight = v
}
  return nil
}

func (p *CDNDomainObject)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Regions =  tSlice
  for i := 0; i < size; i ++ {
var _elem12 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem12 = v
}
    p.Regions = append(p.Regions, _elem12)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *CDNDomainObject) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("CDNDomainObject"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CDNDomainObject) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("domain", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:domain: ", p), err) }
  if err := oprot.WriteString(string(p.Domain)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.domain (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:domain: ", p), err) }
  return err
}

func (p *CDNDomainObject) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("weight", thrift.I16, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:weight: ", p), err) }
  if err := oprot.WriteI16(int16(p.Weight)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.weight (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:weight: ", p), err) }
  return err
}

func (p *CDNDomainObject) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetRegions() {
    if err := oprot.WriteFieldBegin("regions", thrift.LIST, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:regions: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.Regions)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Regions {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:regions: ", p), err) }
  }
  return err
}

func (p *CDNDomainObject) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CDNDomainObject(%+v)", *p)
}

// Attributes:
//  - VersionID
//  - CdnDomains
//  - DefaultSpec
//  - DefaultQuality
//  - SpecMapping
//  - QualityMapping
type StrategyObject struct {
  VersionID int64 `thrift:"version_id,1,required" db:"version_id" json:"version_id"`
  CdnDomains []*CDNDomainObject `thrift:"cdn_domains,2,required" db:"cdn_domains" json:"cdn_domains"`
  DefaultSpec string `thrift:"default_spec,3,required" db:"default_spec" json:"default_spec"`
  DefaultQuality int16 `thrift:"default_quality,4,required" db:"default_quality" json:"default_quality"`
  SpecMapping map[string]string `thrift:"spec_mapping,5,required" db:"spec_mapping" json:"spec_mapping"`
  QualityMapping map[int16]int16 `thrift:"quality_mapping,6,required" db:"quality_mapping" json:"quality_mapping"`
}

func NewStrategyObject() *StrategyObject {
  return &StrategyObject{}
}


func (p *StrategyObject) GetVersionID() int64 {
  return p.VersionID
}

func (p *StrategyObject) GetCdnDomains() []*CDNDomainObject {
  return p.CdnDomains
}

func (p *StrategyObject) GetDefaultSpec() string {
  return p.DefaultSpec
}

func (p *StrategyObject) GetDefaultQuality() int16 {
  return p.DefaultQuality
}

func (p *StrategyObject) GetSpecMapping() map[string]string {
  return p.SpecMapping
}

func (p *StrategyObject) GetQualityMapping() map[int16]int16 {
  return p.QualityMapping
}
func (p *StrategyObject) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetVersionID bool = false;
  var issetCdnDomains bool = false;
  var issetDefaultSpec bool = false;
  var issetDefaultQuality bool = false;
  var issetSpecMapping bool = false;
  var issetQualityMapping bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetVersionID = true
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetCdnDomains = true
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetDefaultSpec = true
    case 4:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetDefaultQuality = true
    case 5:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetSpecMapping = true
    case 6:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetQualityMapping = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetVersionID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field VersionID is not set"));
  }
  if !issetCdnDomains{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field CdnDomains is not set"));
  }
  if !issetDefaultSpec{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field DefaultSpec is not set"));
  }
  if !issetDefaultQuality{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field DefaultQuality is not set"));
  }
  if !issetSpecMapping{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field SpecMapping is not set"));
  }
  if !issetQualityMapping{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field QualityMapping is not set"));
  }
  return nil
}

func (p *StrategyObject)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.VersionID = v
}
  return nil
}

func (p *StrategyObject)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*CDNDomainObject, 0, size)
  p.CdnDomains =  tSlice
  for i := 0; i < size; i ++ {
    _elem13 := &CDNDomainObject{}
    if err := _elem13.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem13), err)
    }
    p.CdnDomains = append(p.CdnDomains, _elem13)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *StrategyObject)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.DefaultSpec = v
}
  return nil
}

func (p *StrategyObject)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.DefaultQuality = v
}
  return nil
}

func (p *StrategyObject)  ReadField5(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.SpecMapping =  tMap
  for i := 0; i < size; i ++ {
var _key14 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key14 = v
}
var _val15 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val15 = v
}
    p.SpecMapping[_key14] = _val15
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *StrategyObject)  ReadField6(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[int16]int16, size)
  p.QualityMapping =  tMap
  for i := 0; i < size; i ++ {
var _key16 int16
    if v, err := iprot.ReadI16(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key16 = v
}
var _val17 int16
    if v, err := iprot.ReadI16(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val17 = v
}
    p.QualityMapping[_key16] = _val17
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *StrategyObject) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("StrategyObject"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StrategyObject) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("version_id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:version_id: ", p), err) }
  if err := oprot.WriteI64(int64(p.VersionID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.version_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:version_id: ", p), err) }
  return err
}

func (p *StrategyObject) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("cdn_domains", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:cdn_domains: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.CdnDomains)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.CdnDomains {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:cdn_domains: ", p), err) }
  return err
}

func (p *StrategyObject) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("default_spec", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:default_spec: ", p), err) }
  if err := oprot.WriteString(string(p.DefaultSpec)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.default_spec (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:default_spec: ", p), err) }
  return err
}

func (p *StrategyObject) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("default_quality", thrift.I16, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:default_quality: ", p), err) }
  if err := oprot.WriteI16(int16(p.DefaultQuality)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.default_quality (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:default_quality: ", p), err) }
  return err
}

func (p *StrategyObject) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("spec_mapping", thrift.MAP, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:spec_mapping: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.SpecMapping)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.SpecMapping {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:spec_mapping: ", p), err) }
  return err
}

func (p *StrategyObject) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("quality_mapping", thrift.MAP, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:quality_mapping: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.I16, thrift.I16, len(p.QualityMapping)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.QualityMapping {
    if err := oprot.WriteI16(int16(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteI16(int16(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:quality_mapping: ", p), err) }
  return err
}

func (p *StrategyObject) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("StrategyObject(%+v)", *p)
}

// Attributes:
//  - Tokens
//  - Source
//  - IsAsync
//  - IsDeleteOrigin
type ConvertToPrivacyImagesParam struct {
  Tokens []string `thrift:"tokens,1,required" db:"tokens" json:"tokens"`
  Source string `thrift:"source,2,required" db:"source" json:"source"`
  IsAsync bool `thrift:"is_async,3" db:"is_async" json:"is_async,omitempty"`
  IsDeleteOrigin bool `thrift:"is_delete_origin,4" db:"is_delete_origin" json:"is_delete_origin,omitempty"`
}

func NewConvertToPrivacyImagesParam() *ConvertToPrivacyImagesParam {
  return &ConvertToPrivacyImagesParam{
IsDeleteOrigin: true,
}
}


func (p *ConvertToPrivacyImagesParam) GetTokens() []string {
  return p.Tokens
}

func (p *ConvertToPrivacyImagesParam) GetSource() string {
  return p.Source
}
var ConvertToPrivacyImagesParam_IsAsync_DEFAULT bool = false

func (p *ConvertToPrivacyImagesParam) GetIsAsync() bool {
  return p.IsAsync
}
var ConvertToPrivacyImagesParam_IsDeleteOrigin_DEFAULT bool = true

func (p *ConvertToPrivacyImagesParam) GetIsDeleteOrigin() bool {
  return p.IsDeleteOrigin
}
func (p *ConvertToPrivacyImagesParam) IsSetIsAsync() bool {
  return p.IsAsync != ConvertToPrivacyImagesParam_IsAsync_DEFAULT
}

func (p *ConvertToPrivacyImagesParam) IsSetIsDeleteOrigin() bool {
  return p.IsDeleteOrigin != ConvertToPrivacyImagesParam_IsDeleteOrigin_DEFAULT
}

func (p *ConvertToPrivacyImagesParam) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetTokens bool = false;
  var issetSource bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetTokens = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetSource = true
    case 3:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetTokens{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Tokens is not set"));
  }
  if !issetSource{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Source is not set"));
  }
  return nil
}

func (p *ConvertToPrivacyImagesParam)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Tokens =  tSlice
  for i := 0; i < size; i ++ {
var _elem18 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem18 = v
}
    p.Tokens = append(p.Tokens, _elem18)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ConvertToPrivacyImagesParam)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Source = v
}
  return nil
}

func (p *ConvertToPrivacyImagesParam)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.IsAsync = v
}
  return nil
}

func (p *ConvertToPrivacyImagesParam)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.IsDeleteOrigin = v
}
  return nil
}

func (p *ConvertToPrivacyImagesParam) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ConvertToPrivacyImagesParam"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ConvertToPrivacyImagesParam) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("tokens", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tokens: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.Tokens)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Tokens {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tokens: ", p), err) }
  return err
}

func (p *ConvertToPrivacyImagesParam) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("source", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:source: ", p), err) }
  if err := oprot.WriteString(string(p.Source)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.source (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:source: ", p), err) }
  return err
}

func (p *ConvertToPrivacyImagesParam) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetIsAsync() {
    if err := oprot.WriteFieldBegin("is_async", thrift.BOOL, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:is_async: ", p), err) }
    if err := oprot.WriteBool(bool(p.IsAsync)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.is_async (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:is_async: ", p), err) }
  }
  return err
}

func (p *ConvertToPrivacyImagesParam) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetIsDeleteOrigin() {
    if err := oprot.WriteFieldBegin("is_delete_origin", thrift.BOOL, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:is_delete_origin: ", p), err) }
    if err := oprot.WriteBool(bool(p.IsDeleteOrigin)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.is_delete_origin (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:is_delete_origin: ", p), err) }
  }
  return err
}

func (p *ConvertToPrivacyImagesParam) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ConvertToPrivacyImagesParam(%+v)", *p)
}

type Pico3Service interface {
  // Parameters:
  //  - PrivacyUploadParam
  GetPrivacyUploadToken(ctx context.Context, privacy_upload_param *GetPrivacyUploadParam) (r *PrivacyImageUploadResult_, err error)
  // Parameters:
  //  - PrivacyImageParam
  UpdateAndProcessPrivacyImage(ctx context.Context, privacy_image_param *UpdateAndProcessPrivacyImageParam) (r *UpdatePrivacyImageStateResult_, err error)
  // Parameters:
  //  - PrivacyURLParam
  BatchPrivacyImageURL(ctx context.Context, privacy_url_param *BatchPrivacyImageUrlParam) (r map[int64][]*PrivacyImageObject, err error)
  // Parameters:
  //  - ImageData
  GetUploadToken(ctx context.Context, image_data *ImageDataParam) (r *ImageUploadResult_, err error)
  // Parameters:
  //  - ImageStateParam
  UpdateImageUploadState(ctx context.Context, image_state_param *UpdateImageStateParam) (r bool, err error)
  // Parameters:
  //  - ImageStateParam
  UpdateImageUploadStateWithMeta(ctx context.Context, image_state_param *UpdateImageStateParam) (r *UpdateImageStateResult_, err error)
  // Parameters:
  //  - ImageInfoParam
  GetImageInfo(ctx context.Context, image_info_param *GetImageInfoParam) (r *ImageMeta, err error)
  ListImageSpecs(ctx context.Context) (r *ImageSpecsData, err error)
  // Parameters:
  //  - Token
  ImageDelete(ctx context.Context, token string) (err error)
  // Parameters:
  //  - Param
  BatchGetImageInfo(ctx context.Context, param *BatchGetImageInfoParam) (r map[string]*ImageMeta, err error)
  // Parameters:
  //  - StrategyParam
  FetchScheduleStrategy(ctx context.Context, strategy_param *ScheduleStrategyParam) (r *StrategyObject, err error)
  // Parameters:
  //  - ConvertParam
  ConvertToPrivacyImages(ctx context.Context, convert_param *ConvertToPrivacyImagesParam) (r map[string]int64, err error)
}

type Pico3ServiceClient struct {
  c thrift.TClient
}

// Deprecated: Use NewPico3Service instead
func NewPico3ServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *Pico3ServiceClient {
  return &Pico3ServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

// Deprecated: Use NewPico3Service instead
func NewPico3ServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *Pico3ServiceClient {
  return &Pico3ServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewPico3ServiceClient(c thrift.TClient) *Pico3ServiceClient {
  return &Pico3ServiceClient{
    c: c,
  }
}

// Parameters:
//  - PrivacyUploadParam
func (p *Pico3ServiceClient) GetPrivacyUploadToken(ctx context.Context, privacy_upload_param *GetPrivacyUploadParam) (r *PrivacyImageUploadResult_, err error) {
  var _args19 Pico3ServiceGetPrivacyUploadTokenArgs
  _args19.PrivacyUploadParam = privacy_upload_param
  var _result20 Pico3ServiceGetPrivacyUploadTokenResult
  if err = p.c.Call(ctx, "get_privacy_upload_token", &_args19, &_result20); err != nil {
    return
  }
  switch {
  case _result20.Error!= nil:
    return r, _result20.Error
  }

  return _result20.GetSuccess(), nil
}

// Parameters:
//  - PrivacyImageParam
func (p *Pico3ServiceClient) UpdateAndProcessPrivacyImage(ctx context.Context, privacy_image_param *UpdateAndProcessPrivacyImageParam) (r *UpdatePrivacyImageStateResult_, err error) {
  var _args21 Pico3ServiceUpdateAndProcessPrivacyImageArgs
  _args21.PrivacyImageParam = privacy_image_param
  var _result22 Pico3ServiceUpdateAndProcessPrivacyImageResult
  if err = p.c.Call(ctx, "update_and_process_privacy_image", &_args21, &_result22); err != nil {
    return
  }
  switch {
  case _result22.Error!= nil:
    return r, _result22.Error
  }

  return _result22.GetSuccess(), nil
}

// Parameters:
//  - PrivacyURLParam
func (p *Pico3ServiceClient) BatchPrivacyImageURL(ctx context.Context, privacy_url_param *BatchPrivacyImageUrlParam) (r map[int64][]*PrivacyImageObject, err error) {
  var _args23 Pico3ServiceBatchPrivacyImageURLArgs
  _args23.PrivacyURLParam = privacy_url_param
  var _result24 Pico3ServiceBatchPrivacyImageURLResult
  if err = p.c.Call(ctx, "batch_privacy_image_url", &_args23, &_result24); err != nil {
    return
  }
  switch {
  case _result24.Error!= nil:
    return r, _result24.Error
  }

  return _result24.GetSuccess(), nil
}

// Parameters:
//  - ImageData
func (p *Pico3ServiceClient) GetUploadToken(ctx context.Context, image_data *ImageDataParam) (r *ImageUploadResult_, err error) {
  var _args25 Pico3ServiceGetUploadTokenArgs
  _args25.ImageData = image_data
  var _result26 Pico3ServiceGetUploadTokenResult
  if err = p.c.Call(ctx, "get_upload_token", &_args25, &_result26); err != nil {
    return
  }
  switch {
  case _result26.Error!= nil:
    return r, _result26.Error
  }

  return _result26.GetSuccess(), nil
}

// Parameters:
//  - ImageStateParam
func (p *Pico3ServiceClient) UpdateImageUploadState(ctx context.Context, image_state_param *UpdateImageStateParam) (r bool, err error) {
  var _args27 Pico3ServiceUpdateImageUploadStateArgs
  _args27.ImageStateParam = image_state_param
  var _result28 Pico3ServiceUpdateImageUploadStateResult
  if err = p.c.Call(ctx, "update_image_upload_state", &_args27, &_result28); err != nil {
    return
  }
  switch {
  case _result28.Error!= nil:
    return r, _result28.Error
  }

  return _result28.GetSuccess(), nil
}

// Parameters:
//  - ImageStateParam
func (p *Pico3ServiceClient) UpdateImageUploadStateWithMeta(ctx context.Context, image_state_param *UpdateImageStateParam) (r *UpdateImageStateResult_, err error) {
  var _args29 Pico3ServiceUpdateImageUploadStateWithMetaArgs
  _args29.ImageStateParam = image_state_param
  var _result30 Pico3ServiceUpdateImageUploadStateWithMetaResult
  if err = p.c.Call(ctx, "update_image_upload_state_with_meta", &_args29, &_result30); err != nil {
    return
  }
  switch {
  case _result30.Error!= nil:
    return r, _result30.Error
  }

  return _result30.GetSuccess(), nil
}

// Parameters:
//  - ImageInfoParam
func (p *Pico3ServiceClient) GetImageInfo(ctx context.Context, image_info_param *GetImageInfoParam) (r *ImageMeta, err error) {
  var _args31 Pico3ServiceGetImageInfoArgs
  _args31.ImageInfoParam = image_info_param
  var _result32 Pico3ServiceGetImageInfoResult
  if err = p.c.Call(ctx, "get_image_info", &_args31, &_result32); err != nil {
    return
  }
  switch {
  case _result32.Error!= nil:
    return r, _result32.Error
  }

  return _result32.GetSuccess(), nil
}

func (p *Pico3ServiceClient) ListImageSpecs(ctx context.Context) (r *ImageSpecsData, err error) {
  var _args33 Pico3ServiceListImageSpecsArgs
  var _result34 Pico3ServiceListImageSpecsResult
  if err = p.c.Call(ctx, "list_image_specs", &_args33, &_result34); err != nil {
    return
  }
  return _result34.GetSuccess(), nil
}

// Parameters:
//  - Token
func (p *Pico3ServiceClient) ImageDelete(ctx context.Context, token string) (err error) {
  var _args35 Pico3ServiceImageDeleteArgs
  _args35.Token = token
  var _result36 Pico3ServiceImageDeleteResult
  if err = p.c.Call(ctx, "image_delete", &_args35, &_result36); err != nil {
    return
  }
  switch {
  case _result36.Error!= nil:
    return _result36.Error
  }

  return nil
}

// Parameters:
//  - Param
func (p *Pico3ServiceClient) BatchGetImageInfo(ctx context.Context, param *BatchGetImageInfoParam) (r map[string]*ImageMeta, err error) {
  var _args37 Pico3ServiceBatchGetImageInfoArgs
  _args37.Param = param
  var _result38 Pico3ServiceBatchGetImageInfoResult
  if err = p.c.Call(ctx, "batch_get_image_info", &_args37, &_result38); err != nil {
    return
  }
  switch {
  case _result38.Error!= nil:
    return r, _result38.Error
  }

  return _result38.GetSuccess(), nil
}

// Parameters:
//  - StrategyParam
func (p *Pico3ServiceClient) FetchScheduleStrategy(ctx context.Context, strategy_param *ScheduleStrategyParam) (r *StrategyObject, err error) {
  var _args39 Pico3ServiceFetchScheduleStrategyArgs
  _args39.StrategyParam = strategy_param
  var _result40 Pico3ServiceFetchScheduleStrategyResult
  if err = p.c.Call(ctx, "fetch_schedule_strategy", &_args39, &_result40); err != nil {
    return
  }
  switch {
  case _result40.Error!= nil:
    return r, _result40.Error
  }

  return _result40.GetSuccess(), nil
}

// Parameters:
//  - ConvertParam
func (p *Pico3ServiceClient) ConvertToPrivacyImages(ctx context.Context, convert_param *ConvertToPrivacyImagesParam) (r map[string]int64, err error) {
  var _args41 Pico3ServiceConvertToPrivacyImagesArgs
  _args41.ConvertParam = convert_param
  var _result42 Pico3ServiceConvertToPrivacyImagesResult
  if err = p.c.Call(ctx, "convert_to_privacy_images", &_args41, &_result42); err != nil {
    return
  }
  switch {
  case _result42.Error!= nil:
    return r, _result42.Error
  }

  return _result42.GetSuccess(), nil
}

type Pico3ServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler Pico3Service
}

func (p *Pico3ServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *Pico3ServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *Pico3ServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewPico3ServiceProcessor(handler Pico3Service) *Pico3ServiceProcessor {

  self43 := &Pico3ServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self43.processorMap["get_privacy_upload_token"] = &pico3ServiceProcessorGetPrivacyUploadToken{handler:handler}
  self43.processorMap["update_and_process_privacy_image"] = &pico3ServiceProcessorUpdateAndProcessPrivacyImage{handler:handler}
  self43.processorMap["batch_privacy_image_url"] = &pico3ServiceProcessorBatchPrivacyImageURL{handler:handler}
  self43.processorMap["get_upload_token"] = &pico3ServiceProcessorGetUploadToken{handler:handler}
  self43.processorMap["update_image_upload_state"] = &pico3ServiceProcessorUpdateImageUploadState{handler:handler}
  self43.processorMap["update_image_upload_state_with_meta"] = &pico3ServiceProcessorUpdateImageUploadStateWithMeta{handler:handler}
  self43.processorMap["get_image_info"] = &pico3ServiceProcessorGetImageInfo{handler:handler}
  self43.processorMap["list_image_specs"] = &pico3ServiceProcessorListImageSpecs{handler:handler}
  self43.processorMap["image_delete"] = &pico3ServiceProcessorImageDelete{handler:handler}
  self43.processorMap["batch_get_image_info"] = &pico3ServiceProcessorBatchGetImageInfo{handler:handler}
  self43.processorMap["fetch_schedule_strategy"] = &pico3ServiceProcessorFetchScheduleStrategy{handler:handler}
  self43.processorMap["convert_to_privacy_images"] = &pico3ServiceProcessorConvertToPrivacyImages{handler:handler}
return self43
}

func (p *Pico3ServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x44 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x44.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush()
  return false, x44

}

type pico3ServiceProcessorGetPrivacyUploadToken struct {
  handler Pico3Service
}

func (p *pico3ServiceProcessorGetPrivacyUploadToken) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := Pico3ServiceGetPrivacyUploadTokenArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("get_privacy_upload_token", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := Pico3ServiceGetPrivacyUploadTokenResult{}
var retval *PrivacyImageUploadResult_
  var err2 error
  if retval, err2 = p.handler.GetPrivacyUploadToken(ctx, args.PrivacyUploadParam); err2 != nil {
  switch v := err2.(type) {
    case *InvalidInput:
  result.Error = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_privacy_upload_token: " + err2.Error())
    oprot.WriteMessageBegin("get_privacy_upload_token", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("get_privacy_upload_token", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type pico3ServiceProcessorUpdateAndProcessPrivacyImage struct {
  handler Pico3Service
}

func (p *pico3ServiceProcessorUpdateAndProcessPrivacyImage) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := Pico3ServiceUpdateAndProcessPrivacyImageArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("update_and_process_privacy_image", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := Pico3ServiceUpdateAndProcessPrivacyImageResult{}
var retval *UpdatePrivacyImageStateResult_
  var err2 error
  if retval, err2 = p.handler.UpdateAndProcessPrivacyImage(ctx, args.PrivacyImageParam); err2 != nil {
  switch v := err2.(type) {
    case *InvalidInput:
  result.Error = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing update_and_process_privacy_image: " + err2.Error())
    oprot.WriteMessageBegin("update_and_process_privacy_image", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("update_and_process_privacy_image", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type pico3ServiceProcessorBatchPrivacyImageURL struct {
  handler Pico3Service
}

func (p *pico3ServiceProcessorBatchPrivacyImageURL) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := Pico3ServiceBatchPrivacyImageURLArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("batch_privacy_image_url", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := Pico3ServiceBatchPrivacyImageURLResult{}
var retval map[int64][]*PrivacyImageObject
  var err2 error
  if retval, err2 = p.handler.BatchPrivacyImageURL(ctx, args.PrivacyURLParam); err2 != nil {
  switch v := err2.(type) {
    case *InvalidInput:
  result.Error = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing batch_privacy_image_url: " + err2.Error())
    oprot.WriteMessageBegin("batch_privacy_image_url", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("batch_privacy_image_url", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type pico3ServiceProcessorGetUploadToken struct {
  handler Pico3Service
}

func (p *pico3ServiceProcessorGetUploadToken) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := Pico3ServiceGetUploadTokenArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("get_upload_token", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := Pico3ServiceGetUploadTokenResult{}
var retval *ImageUploadResult_
  var err2 error
  if retval, err2 = p.handler.GetUploadToken(ctx, args.ImageData); err2 != nil {
  switch v := err2.(type) {
    case *InvalidInput:
  result.Error = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_upload_token: " + err2.Error())
    oprot.WriteMessageBegin("get_upload_token", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("get_upload_token", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type pico3ServiceProcessorUpdateImageUploadState struct {
  handler Pico3Service
}

func (p *pico3ServiceProcessorUpdateImageUploadState) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := Pico3ServiceUpdateImageUploadStateArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("update_image_upload_state", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := Pico3ServiceUpdateImageUploadStateResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.UpdateImageUploadState(ctx, args.ImageStateParam); err2 != nil {
  switch v := err2.(type) {
    case *InvalidInput:
  result.Error = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing update_image_upload_state: " + err2.Error())
    oprot.WriteMessageBegin("update_image_upload_state", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("update_image_upload_state", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type pico3ServiceProcessorUpdateImageUploadStateWithMeta struct {
  handler Pico3Service
}

func (p *pico3ServiceProcessorUpdateImageUploadStateWithMeta) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := Pico3ServiceUpdateImageUploadStateWithMetaArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("update_image_upload_state_with_meta", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := Pico3ServiceUpdateImageUploadStateWithMetaResult{}
var retval *UpdateImageStateResult_
  var err2 error
  if retval, err2 = p.handler.UpdateImageUploadStateWithMeta(ctx, args.ImageStateParam); err2 != nil {
  switch v := err2.(type) {
    case *InvalidInput:
  result.Error = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing update_image_upload_state_with_meta: " + err2.Error())
    oprot.WriteMessageBegin("update_image_upload_state_with_meta", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("update_image_upload_state_with_meta", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type pico3ServiceProcessorGetImageInfo struct {
  handler Pico3Service
}

func (p *pico3ServiceProcessorGetImageInfo) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := Pico3ServiceGetImageInfoArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("get_image_info", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := Pico3ServiceGetImageInfoResult{}
var retval *ImageMeta
  var err2 error
  if retval, err2 = p.handler.GetImageInfo(ctx, args.ImageInfoParam); err2 != nil {
  switch v := err2.(type) {
    case *InvalidInput:
  result.Error = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_image_info: " + err2.Error())
    oprot.WriteMessageBegin("get_image_info", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("get_image_info", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type pico3ServiceProcessorListImageSpecs struct {
  handler Pico3Service
}

func (p *pico3ServiceProcessorListImageSpecs) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := Pico3ServiceListImageSpecsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("list_image_specs", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := Pico3ServiceListImageSpecsResult{}
var retval *ImageSpecsData
  var err2 error
  if retval, err2 = p.handler.ListImageSpecs(ctx); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing list_image_specs: " + err2.Error())
    oprot.WriteMessageBegin("list_image_specs", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("list_image_specs", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type pico3ServiceProcessorImageDelete struct {
  handler Pico3Service
}

func (p *pico3ServiceProcessorImageDelete) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := Pico3ServiceImageDeleteArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("image_delete", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := Pico3ServiceImageDeleteResult{}
  var err2 error
  if err2 = p.handler.ImageDelete(ctx, args.Token); err2 != nil {
  switch v := err2.(type) {
    case *InvalidInput:
  result.Error = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing image_delete: " + err2.Error())
    oprot.WriteMessageBegin("image_delete", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("image_delete", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type pico3ServiceProcessorBatchGetImageInfo struct {
  handler Pico3Service
}

func (p *pico3ServiceProcessorBatchGetImageInfo) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := Pico3ServiceBatchGetImageInfoArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("batch_get_image_info", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := Pico3ServiceBatchGetImageInfoResult{}
var retval map[string]*ImageMeta
  var err2 error
  if retval, err2 = p.handler.BatchGetImageInfo(ctx, args.Param); err2 != nil {
  switch v := err2.(type) {
    case *InvalidInput:
  result.Error = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing batch_get_image_info: " + err2.Error())
    oprot.WriteMessageBegin("batch_get_image_info", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("batch_get_image_info", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type pico3ServiceProcessorFetchScheduleStrategy struct {
  handler Pico3Service
}

func (p *pico3ServiceProcessorFetchScheduleStrategy) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := Pico3ServiceFetchScheduleStrategyArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("fetch_schedule_strategy", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := Pico3ServiceFetchScheduleStrategyResult{}
var retval *StrategyObject
  var err2 error
  if retval, err2 = p.handler.FetchScheduleStrategy(ctx, args.StrategyParam); err2 != nil {
  switch v := err2.(type) {
    case *InvalidInput:
  result.Error = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing fetch_schedule_strategy: " + err2.Error())
    oprot.WriteMessageBegin("fetch_schedule_strategy", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("fetch_schedule_strategy", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type pico3ServiceProcessorConvertToPrivacyImages struct {
  handler Pico3Service
}

func (p *pico3ServiceProcessorConvertToPrivacyImages) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := Pico3ServiceConvertToPrivacyImagesArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("convert_to_privacy_images", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := Pico3ServiceConvertToPrivacyImagesResult{}
var retval map[string]int64
  var err2 error
  if retval, err2 = p.handler.ConvertToPrivacyImages(ctx, args.ConvertParam); err2 != nil {
  switch v := err2.(type) {
    case *InvalidInput:
  result.Error = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing convert_to_privacy_images: " + err2.Error())
    oprot.WriteMessageBegin("convert_to_privacy_images", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("convert_to_privacy_images", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - PrivacyUploadParam
type Pico3ServiceGetPrivacyUploadTokenArgs struct {
  PrivacyUploadParam *GetPrivacyUploadParam `thrift:"privacy_upload_param,1" db:"privacy_upload_param" json:"privacy_upload_param"`
}

func NewPico3ServiceGetPrivacyUploadTokenArgs() *Pico3ServiceGetPrivacyUploadTokenArgs {
  return &Pico3ServiceGetPrivacyUploadTokenArgs{}
}

var Pico3ServiceGetPrivacyUploadTokenArgs_PrivacyUploadParam_DEFAULT *GetPrivacyUploadParam
func (p *Pico3ServiceGetPrivacyUploadTokenArgs) GetPrivacyUploadParam() *GetPrivacyUploadParam {
  if !p.IsSetPrivacyUploadParam() {
    return Pico3ServiceGetPrivacyUploadTokenArgs_PrivacyUploadParam_DEFAULT
  }
return p.PrivacyUploadParam
}
func (p *Pico3ServiceGetPrivacyUploadTokenArgs) IsSetPrivacyUploadParam() bool {
  return p.PrivacyUploadParam != nil
}

func (p *Pico3ServiceGetPrivacyUploadTokenArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Pico3ServiceGetPrivacyUploadTokenArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.PrivacyUploadParam = &GetPrivacyUploadParam{}
  if err := p.PrivacyUploadParam.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.PrivacyUploadParam), err)
  }
  return nil
}

func (p *Pico3ServiceGetPrivacyUploadTokenArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_privacy_upload_token_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Pico3ServiceGetPrivacyUploadTokenArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("privacy_upload_param", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:privacy_upload_param: ", p), err) }
  if err := p.PrivacyUploadParam.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.PrivacyUploadParam), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:privacy_upload_param: ", p), err) }
  return err
}

func (p *Pico3ServiceGetPrivacyUploadTokenArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Pico3ServiceGetPrivacyUploadTokenArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Error
type Pico3ServiceGetPrivacyUploadTokenResult struct {
  Success *PrivacyImageUploadResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
  Error *InvalidInput `thrift:"error,1" db:"error" json:"error,omitempty"`
}

func NewPico3ServiceGetPrivacyUploadTokenResult() *Pico3ServiceGetPrivacyUploadTokenResult {
  return &Pico3ServiceGetPrivacyUploadTokenResult{}
}

var Pico3ServiceGetPrivacyUploadTokenResult_Success_DEFAULT *PrivacyImageUploadResult_
func (p *Pico3ServiceGetPrivacyUploadTokenResult) GetSuccess() *PrivacyImageUploadResult_ {
  if !p.IsSetSuccess() {
    return Pico3ServiceGetPrivacyUploadTokenResult_Success_DEFAULT
  }
return p.Success
}
var Pico3ServiceGetPrivacyUploadTokenResult_Error_DEFAULT *InvalidInput
func (p *Pico3ServiceGetPrivacyUploadTokenResult) GetError() *InvalidInput {
  if !p.IsSetError() {
    return Pico3ServiceGetPrivacyUploadTokenResult_Error_DEFAULT
  }
return p.Error
}
func (p *Pico3ServiceGetPrivacyUploadTokenResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *Pico3ServiceGetPrivacyUploadTokenResult) IsSetError() bool {
  return p.Error != nil
}

func (p *Pico3ServiceGetPrivacyUploadTokenResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Pico3ServiceGetPrivacyUploadTokenResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &PrivacyImageUploadResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *Pico3ServiceGetPrivacyUploadTokenResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Error = &InvalidInput{
  Code: 400,
}
  if err := p.Error.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Error), err)
  }
  return nil
}

func (p *Pico3ServiceGetPrivacyUploadTokenResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_privacy_upload_token_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Pico3ServiceGetPrivacyUploadTokenResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *Pico3ServiceGetPrivacyUploadTokenResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetError() {
    if err := oprot.WriteFieldBegin("error", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error: ", p), err) }
    if err := p.Error.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Error), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error: ", p), err) }
  }
  return err
}

func (p *Pico3ServiceGetPrivacyUploadTokenResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Pico3ServiceGetPrivacyUploadTokenResult(%+v)", *p)
}

// Attributes:
//  - PrivacyImageParam
type Pico3ServiceUpdateAndProcessPrivacyImageArgs struct {
  PrivacyImageParam *UpdateAndProcessPrivacyImageParam `thrift:"privacy_image_param,1" db:"privacy_image_param" json:"privacy_image_param"`
}

func NewPico3ServiceUpdateAndProcessPrivacyImageArgs() *Pico3ServiceUpdateAndProcessPrivacyImageArgs {
  return &Pico3ServiceUpdateAndProcessPrivacyImageArgs{}
}

var Pico3ServiceUpdateAndProcessPrivacyImageArgs_PrivacyImageParam_DEFAULT *UpdateAndProcessPrivacyImageParam
func (p *Pico3ServiceUpdateAndProcessPrivacyImageArgs) GetPrivacyImageParam() *UpdateAndProcessPrivacyImageParam {
  if !p.IsSetPrivacyImageParam() {
    return Pico3ServiceUpdateAndProcessPrivacyImageArgs_PrivacyImageParam_DEFAULT
  }
return p.PrivacyImageParam
}
func (p *Pico3ServiceUpdateAndProcessPrivacyImageArgs) IsSetPrivacyImageParam() bool {
  return p.PrivacyImageParam != nil
}

func (p *Pico3ServiceUpdateAndProcessPrivacyImageArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Pico3ServiceUpdateAndProcessPrivacyImageArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.PrivacyImageParam = &UpdateAndProcessPrivacyImageParam{}
  if err := p.PrivacyImageParam.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.PrivacyImageParam), err)
  }
  return nil
}

func (p *Pico3ServiceUpdateAndProcessPrivacyImageArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("update_and_process_privacy_image_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Pico3ServiceUpdateAndProcessPrivacyImageArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("privacy_image_param", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:privacy_image_param: ", p), err) }
  if err := p.PrivacyImageParam.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.PrivacyImageParam), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:privacy_image_param: ", p), err) }
  return err
}

func (p *Pico3ServiceUpdateAndProcessPrivacyImageArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Pico3ServiceUpdateAndProcessPrivacyImageArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Error
type Pico3ServiceUpdateAndProcessPrivacyImageResult struct {
  Success *UpdatePrivacyImageStateResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
  Error *InvalidInput `thrift:"error,1" db:"error" json:"error,omitempty"`
}

func NewPico3ServiceUpdateAndProcessPrivacyImageResult() *Pico3ServiceUpdateAndProcessPrivacyImageResult {
  return &Pico3ServiceUpdateAndProcessPrivacyImageResult{}
}

var Pico3ServiceUpdateAndProcessPrivacyImageResult_Success_DEFAULT *UpdatePrivacyImageStateResult_
func (p *Pico3ServiceUpdateAndProcessPrivacyImageResult) GetSuccess() *UpdatePrivacyImageStateResult_ {
  if !p.IsSetSuccess() {
    return Pico3ServiceUpdateAndProcessPrivacyImageResult_Success_DEFAULT
  }
return p.Success
}
var Pico3ServiceUpdateAndProcessPrivacyImageResult_Error_DEFAULT *InvalidInput
func (p *Pico3ServiceUpdateAndProcessPrivacyImageResult) GetError() *InvalidInput {
  if !p.IsSetError() {
    return Pico3ServiceUpdateAndProcessPrivacyImageResult_Error_DEFAULT
  }
return p.Error
}
func (p *Pico3ServiceUpdateAndProcessPrivacyImageResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *Pico3ServiceUpdateAndProcessPrivacyImageResult) IsSetError() bool {
  return p.Error != nil
}

func (p *Pico3ServiceUpdateAndProcessPrivacyImageResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Pico3ServiceUpdateAndProcessPrivacyImageResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &UpdatePrivacyImageStateResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *Pico3ServiceUpdateAndProcessPrivacyImageResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Error = &InvalidInput{
  Code: 400,
}
  if err := p.Error.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Error), err)
  }
  return nil
}

func (p *Pico3ServiceUpdateAndProcessPrivacyImageResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("update_and_process_privacy_image_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Pico3ServiceUpdateAndProcessPrivacyImageResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *Pico3ServiceUpdateAndProcessPrivacyImageResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetError() {
    if err := oprot.WriteFieldBegin("error", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error: ", p), err) }
    if err := p.Error.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Error), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error: ", p), err) }
  }
  return err
}

func (p *Pico3ServiceUpdateAndProcessPrivacyImageResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Pico3ServiceUpdateAndProcessPrivacyImageResult(%+v)", *p)
}

// Attributes:
//  - PrivacyURLParam
type Pico3ServiceBatchPrivacyImageURLArgs struct {
  PrivacyURLParam *BatchPrivacyImageUrlParam `thrift:"privacy_url_param,1" db:"privacy_url_param" json:"privacy_url_param"`
}

func NewPico3ServiceBatchPrivacyImageURLArgs() *Pico3ServiceBatchPrivacyImageURLArgs {
  return &Pico3ServiceBatchPrivacyImageURLArgs{}
}

var Pico3ServiceBatchPrivacyImageURLArgs_PrivacyURLParam_DEFAULT *BatchPrivacyImageUrlParam
func (p *Pico3ServiceBatchPrivacyImageURLArgs) GetPrivacyURLParam() *BatchPrivacyImageUrlParam {
  if !p.IsSetPrivacyURLParam() {
    return Pico3ServiceBatchPrivacyImageURLArgs_PrivacyURLParam_DEFAULT
  }
return p.PrivacyURLParam
}
func (p *Pico3ServiceBatchPrivacyImageURLArgs) IsSetPrivacyURLParam() bool {
  return p.PrivacyURLParam != nil
}

func (p *Pico3ServiceBatchPrivacyImageURLArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Pico3ServiceBatchPrivacyImageURLArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.PrivacyURLParam = &BatchPrivacyImageUrlParam{
  IsFilterOrigin: true,
}
  if err := p.PrivacyURLParam.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.PrivacyURLParam), err)
  }
  return nil
}

func (p *Pico3ServiceBatchPrivacyImageURLArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("batch_privacy_image_url_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Pico3ServiceBatchPrivacyImageURLArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("privacy_url_param", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:privacy_url_param: ", p), err) }
  if err := p.PrivacyURLParam.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.PrivacyURLParam), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:privacy_url_param: ", p), err) }
  return err
}

func (p *Pico3ServiceBatchPrivacyImageURLArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Pico3ServiceBatchPrivacyImageURLArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Error
type Pico3ServiceBatchPrivacyImageURLResult struct {
  Success map[int64][]*PrivacyImageObject `thrift:"success,0" db:"success" json:"success,omitempty"`
  Error *InvalidInput `thrift:"error,1" db:"error" json:"error,omitempty"`
}

func NewPico3ServiceBatchPrivacyImageURLResult() *Pico3ServiceBatchPrivacyImageURLResult {
  return &Pico3ServiceBatchPrivacyImageURLResult{}
}

var Pico3ServiceBatchPrivacyImageURLResult_Success_DEFAULT map[int64][]*PrivacyImageObject

func (p *Pico3ServiceBatchPrivacyImageURLResult) GetSuccess() map[int64][]*PrivacyImageObject {
  return p.Success
}
var Pico3ServiceBatchPrivacyImageURLResult_Error_DEFAULT *InvalidInput
func (p *Pico3ServiceBatchPrivacyImageURLResult) GetError() *InvalidInput {
  if !p.IsSetError() {
    return Pico3ServiceBatchPrivacyImageURLResult_Error_DEFAULT
  }
return p.Error
}
func (p *Pico3ServiceBatchPrivacyImageURLResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *Pico3ServiceBatchPrivacyImageURLResult) IsSetError() bool {
  return p.Error != nil
}

func (p *Pico3ServiceBatchPrivacyImageURLResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Pico3ServiceBatchPrivacyImageURLResult)  ReadField0(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[int64][]*PrivacyImageObject, size)
  p.Success =  tMap
  for i := 0; i < size; i ++ {
var _key45 int64
    if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key45 = v
}
    _, size, err := iprot.ReadListBegin()
    if err != nil {
      return thrift.PrependError("error reading list begin: ", err)
    }
    tSlice := make([]*PrivacyImageObject, 0, size)
    _val46 :=  tSlice
    for i := 0; i < size; i ++ {
      _elem47 := &PrivacyImageObject{}
      if err := _elem47.Read(iprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem47), err)
      }
      _val46 = append(_val46, _elem47)
    }
    if err := iprot.ReadListEnd(); err != nil {
      return thrift.PrependError("error reading list end: ", err)
    }
    p.Success[_key45] = _val46
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *Pico3ServiceBatchPrivacyImageURLResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Error = &InvalidInput{
  Code: 400,
}
  if err := p.Error.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Error), err)
  }
  return nil
}

func (p *Pico3ServiceBatchPrivacyImageURLResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("batch_privacy_image_url_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Pico3ServiceBatchPrivacyImageURLResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.MAP, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteMapBegin(thrift.I64, thrift.LIST, len(p.Success)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.Success {
      if err := oprot.WriteI64(int64(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteListBegin(thrift.STRUCT, len(v)); err != nil {
        return thrift.PrependError("error writing list begin: ", err)
      }
      for _, v := range v {
        if err := v.Write(oprot); err != nil {
          return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
        }
      }
      if err := oprot.WriteListEnd(); err != nil {
        return thrift.PrependError("error writing list end: ", err)
      }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *Pico3ServiceBatchPrivacyImageURLResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetError() {
    if err := oprot.WriteFieldBegin("error", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error: ", p), err) }
    if err := p.Error.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Error), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error: ", p), err) }
  }
  return err
}

func (p *Pico3ServiceBatchPrivacyImageURLResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Pico3ServiceBatchPrivacyImageURLResult(%+v)", *p)
}

// Attributes:
//  - ImageData
type Pico3ServiceGetUploadTokenArgs struct {
  ImageData *ImageDataParam `thrift:"image_data,1" db:"image_data" json:"image_data"`
}

func NewPico3ServiceGetUploadTokenArgs() *Pico3ServiceGetUploadTokenArgs {
  return &Pico3ServiceGetUploadTokenArgs{}
}

var Pico3ServiceGetUploadTokenArgs_ImageData_DEFAULT *ImageDataParam
func (p *Pico3ServiceGetUploadTokenArgs) GetImageData() *ImageDataParam {
  if !p.IsSetImageData() {
    return Pico3ServiceGetUploadTokenArgs_ImageData_DEFAULT
  }
return p.ImageData
}
func (p *Pico3ServiceGetUploadTokenArgs) IsSetImageData() bool {
  return p.ImageData != nil
}

func (p *Pico3ServiceGetUploadTokenArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Pico3ServiceGetUploadTokenArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.ImageData = &ImageDataParam{}
  if err := p.ImageData.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ImageData), err)
  }
  return nil
}

func (p *Pico3ServiceGetUploadTokenArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_upload_token_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Pico3ServiceGetUploadTokenArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("image_data", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:image_data: ", p), err) }
  if err := p.ImageData.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ImageData), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:image_data: ", p), err) }
  return err
}

func (p *Pico3ServiceGetUploadTokenArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Pico3ServiceGetUploadTokenArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Error
type Pico3ServiceGetUploadTokenResult struct {
  Success *ImageUploadResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
  Error *InvalidInput `thrift:"error,1" db:"error" json:"error,omitempty"`
}

func NewPico3ServiceGetUploadTokenResult() *Pico3ServiceGetUploadTokenResult {
  return &Pico3ServiceGetUploadTokenResult{}
}

var Pico3ServiceGetUploadTokenResult_Success_DEFAULT *ImageUploadResult_
func (p *Pico3ServiceGetUploadTokenResult) GetSuccess() *ImageUploadResult_ {
  if !p.IsSetSuccess() {
    return Pico3ServiceGetUploadTokenResult_Success_DEFAULT
  }
return p.Success
}
var Pico3ServiceGetUploadTokenResult_Error_DEFAULT *InvalidInput
func (p *Pico3ServiceGetUploadTokenResult) GetError() *InvalidInput {
  if !p.IsSetError() {
    return Pico3ServiceGetUploadTokenResult_Error_DEFAULT
  }
return p.Error
}
func (p *Pico3ServiceGetUploadTokenResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *Pico3ServiceGetUploadTokenResult) IsSetError() bool {
  return p.Error != nil
}

func (p *Pico3ServiceGetUploadTokenResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Pico3ServiceGetUploadTokenResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &ImageUploadResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *Pico3ServiceGetUploadTokenResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Error = &InvalidInput{
  Code: 400,
}
  if err := p.Error.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Error), err)
  }
  return nil
}

func (p *Pico3ServiceGetUploadTokenResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_upload_token_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Pico3ServiceGetUploadTokenResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *Pico3ServiceGetUploadTokenResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetError() {
    if err := oprot.WriteFieldBegin("error", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error: ", p), err) }
    if err := p.Error.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Error), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error: ", p), err) }
  }
  return err
}

func (p *Pico3ServiceGetUploadTokenResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Pico3ServiceGetUploadTokenResult(%+v)", *p)
}

// Attributes:
//  - ImageStateParam
type Pico3ServiceUpdateImageUploadStateArgs struct {
  ImageStateParam *UpdateImageStateParam `thrift:"image_state_param,1" db:"image_state_param" json:"image_state_param"`
}

func NewPico3ServiceUpdateImageUploadStateArgs() *Pico3ServiceUpdateImageUploadStateArgs {
  return &Pico3ServiceUpdateImageUploadStateArgs{}
}

var Pico3ServiceUpdateImageUploadStateArgs_ImageStateParam_DEFAULT *UpdateImageStateParam
func (p *Pico3ServiceUpdateImageUploadStateArgs) GetImageStateParam() *UpdateImageStateParam {
  if !p.IsSetImageStateParam() {
    return Pico3ServiceUpdateImageUploadStateArgs_ImageStateParam_DEFAULT
  }
return p.ImageStateParam
}
func (p *Pico3ServiceUpdateImageUploadStateArgs) IsSetImageStateParam() bool {
  return p.ImageStateParam != nil
}

func (p *Pico3ServiceUpdateImageUploadStateArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Pico3ServiceUpdateImageUploadStateArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.ImageStateParam = &UpdateImageStateParam{}
  if err := p.ImageStateParam.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ImageStateParam), err)
  }
  return nil
}

func (p *Pico3ServiceUpdateImageUploadStateArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("update_image_upload_state_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Pico3ServiceUpdateImageUploadStateArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("image_state_param", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:image_state_param: ", p), err) }
  if err := p.ImageStateParam.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ImageStateParam), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:image_state_param: ", p), err) }
  return err
}

func (p *Pico3ServiceUpdateImageUploadStateArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Pico3ServiceUpdateImageUploadStateArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Error
type Pico3ServiceUpdateImageUploadStateResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
  Error *InvalidInput `thrift:"error,1" db:"error" json:"error,omitempty"`
}

func NewPico3ServiceUpdateImageUploadStateResult() *Pico3ServiceUpdateImageUploadStateResult {
  return &Pico3ServiceUpdateImageUploadStateResult{}
}

var Pico3ServiceUpdateImageUploadStateResult_Success_DEFAULT bool
func (p *Pico3ServiceUpdateImageUploadStateResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return Pico3ServiceUpdateImageUploadStateResult_Success_DEFAULT
  }
return *p.Success
}
var Pico3ServiceUpdateImageUploadStateResult_Error_DEFAULT *InvalidInput
func (p *Pico3ServiceUpdateImageUploadStateResult) GetError() *InvalidInput {
  if !p.IsSetError() {
    return Pico3ServiceUpdateImageUploadStateResult_Error_DEFAULT
  }
return p.Error
}
func (p *Pico3ServiceUpdateImageUploadStateResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *Pico3ServiceUpdateImageUploadStateResult) IsSetError() bool {
  return p.Error != nil
}

func (p *Pico3ServiceUpdateImageUploadStateResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Pico3ServiceUpdateImageUploadStateResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *Pico3ServiceUpdateImageUploadStateResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Error = &InvalidInput{
  Code: 400,
}
  if err := p.Error.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Error), err)
  }
  return nil
}

func (p *Pico3ServiceUpdateImageUploadStateResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("update_image_upload_state_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Pico3ServiceUpdateImageUploadStateResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *Pico3ServiceUpdateImageUploadStateResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetError() {
    if err := oprot.WriteFieldBegin("error", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error: ", p), err) }
    if err := p.Error.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Error), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error: ", p), err) }
  }
  return err
}

func (p *Pico3ServiceUpdateImageUploadStateResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Pico3ServiceUpdateImageUploadStateResult(%+v)", *p)
}

// Attributes:
//  - ImageStateParam
type Pico3ServiceUpdateImageUploadStateWithMetaArgs struct {
  ImageStateParam *UpdateImageStateParam `thrift:"image_state_param,1" db:"image_state_param" json:"image_state_param"`
}

func NewPico3ServiceUpdateImageUploadStateWithMetaArgs() *Pico3ServiceUpdateImageUploadStateWithMetaArgs {
  return &Pico3ServiceUpdateImageUploadStateWithMetaArgs{}
}

var Pico3ServiceUpdateImageUploadStateWithMetaArgs_ImageStateParam_DEFAULT *UpdateImageStateParam
func (p *Pico3ServiceUpdateImageUploadStateWithMetaArgs) GetImageStateParam() *UpdateImageStateParam {
  if !p.IsSetImageStateParam() {
    return Pico3ServiceUpdateImageUploadStateWithMetaArgs_ImageStateParam_DEFAULT
  }
return p.ImageStateParam
}
func (p *Pico3ServiceUpdateImageUploadStateWithMetaArgs) IsSetImageStateParam() bool {
  return p.ImageStateParam != nil
}

func (p *Pico3ServiceUpdateImageUploadStateWithMetaArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Pico3ServiceUpdateImageUploadStateWithMetaArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.ImageStateParam = &UpdateImageStateParam{}
  if err := p.ImageStateParam.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ImageStateParam), err)
  }
  return nil
}

func (p *Pico3ServiceUpdateImageUploadStateWithMetaArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("update_image_upload_state_with_meta_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Pico3ServiceUpdateImageUploadStateWithMetaArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("image_state_param", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:image_state_param: ", p), err) }
  if err := p.ImageStateParam.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ImageStateParam), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:image_state_param: ", p), err) }
  return err
}

func (p *Pico3ServiceUpdateImageUploadStateWithMetaArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Pico3ServiceUpdateImageUploadStateWithMetaArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Error
type Pico3ServiceUpdateImageUploadStateWithMetaResult struct {
  Success *UpdateImageStateResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
  Error *InvalidInput `thrift:"error,1" db:"error" json:"error,omitempty"`
}

func NewPico3ServiceUpdateImageUploadStateWithMetaResult() *Pico3ServiceUpdateImageUploadStateWithMetaResult {
  return &Pico3ServiceUpdateImageUploadStateWithMetaResult{}
}

var Pico3ServiceUpdateImageUploadStateWithMetaResult_Success_DEFAULT *UpdateImageStateResult_
func (p *Pico3ServiceUpdateImageUploadStateWithMetaResult) GetSuccess() *UpdateImageStateResult_ {
  if !p.IsSetSuccess() {
    return Pico3ServiceUpdateImageUploadStateWithMetaResult_Success_DEFAULT
  }
return p.Success
}
var Pico3ServiceUpdateImageUploadStateWithMetaResult_Error_DEFAULT *InvalidInput
func (p *Pico3ServiceUpdateImageUploadStateWithMetaResult) GetError() *InvalidInput {
  if !p.IsSetError() {
    return Pico3ServiceUpdateImageUploadStateWithMetaResult_Error_DEFAULT
  }
return p.Error
}
func (p *Pico3ServiceUpdateImageUploadStateWithMetaResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *Pico3ServiceUpdateImageUploadStateWithMetaResult) IsSetError() bool {
  return p.Error != nil
}

func (p *Pico3ServiceUpdateImageUploadStateWithMetaResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Pico3ServiceUpdateImageUploadStateWithMetaResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &UpdateImageStateResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *Pico3ServiceUpdateImageUploadStateWithMetaResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Error = &InvalidInput{
  Code: 400,
}
  if err := p.Error.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Error), err)
  }
  return nil
}

func (p *Pico3ServiceUpdateImageUploadStateWithMetaResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("update_image_upload_state_with_meta_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Pico3ServiceUpdateImageUploadStateWithMetaResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *Pico3ServiceUpdateImageUploadStateWithMetaResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetError() {
    if err := oprot.WriteFieldBegin("error", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error: ", p), err) }
    if err := p.Error.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Error), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error: ", p), err) }
  }
  return err
}

func (p *Pico3ServiceUpdateImageUploadStateWithMetaResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Pico3ServiceUpdateImageUploadStateWithMetaResult(%+v)", *p)
}

// Attributes:
//  - ImageInfoParam
type Pico3ServiceGetImageInfoArgs struct {
  ImageInfoParam *GetImageInfoParam `thrift:"image_info_param,1" db:"image_info_param" json:"image_info_param"`
}

func NewPico3ServiceGetImageInfoArgs() *Pico3ServiceGetImageInfoArgs {
  return &Pico3ServiceGetImageInfoArgs{}
}

var Pico3ServiceGetImageInfoArgs_ImageInfoParam_DEFAULT *GetImageInfoParam
func (p *Pico3ServiceGetImageInfoArgs) GetImageInfoParam() *GetImageInfoParam {
  if !p.IsSetImageInfoParam() {
    return Pico3ServiceGetImageInfoArgs_ImageInfoParam_DEFAULT
  }
return p.ImageInfoParam
}
func (p *Pico3ServiceGetImageInfoArgs) IsSetImageInfoParam() bool {
  return p.ImageInfoParam != nil
}

func (p *Pico3ServiceGetImageInfoArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Pico3ServiceGetImageInfoArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.ImageInfoParam = &GetImageInfoParam{}
  if err := p.ImageInfoParam.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ImageInfoParam), err)
  }
  return nil
}

func (p *Pico3ServiceGetImageInfoArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_image_info_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Pico3ServiceGetImageInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("image_info_param", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:image_info_param: ", p), err) }
  if err := p.ImageInfoParam.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ImageInfoParam), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:image_info_param: ", p), err) }
  return err
}

func (p *Pico3ServiceGetImageInfoArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Pico3ServiceGetImageInfoArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Error
type Pico3ServiceGetImageInfoResult struct {
  Success *ImageMeta `thrift:"success,0" db:"success" json:"success,omitempty"`
  Error *InvalidInput `thrift:"error,1" db:"error" json:"error,omitempty"`
}

func NewPico3ServiceGetImageInfoResult() *Pico3ServiceGetImageInfoResult {
  return &Pico3ServiceGetImageInfoResult{}
}

var Pico3ServiceGetImageInfoResult_Success_DEFAULT *ImageMeta
func (p *Pico3ServiceGetImageInfoResult) GetSuccess() *ImageMeta {
  if !p.IsSetSuccess() {
    return Pico3ServiceGetImageInfoResult_Success_DEFAULT
  }
return p.Success
}
var Pico3ServiceGetImageInfoResult_Error_DEFAULT *InvalidInput
func (p *Pico3ServiceGetImageInfoResult) GetError() *InvalidInput {
  if !p.IsSetError() {
    return Pico3ServiceGetImageInfoResult_Error_DEFAULT
  }
return p.Error
}
func (p *Pico3ServiceGetImageInfoResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *Pico3ServiceGetImageInfoResult) IsSetError() bool {
  return p.Error != nil
}

func (p *Pico3ServiceGetImageInfoResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Pico3ServiceGetImageInfoResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &ImageMeta{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *Pico3ServiceGetImageInfoResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Error = &InvalidInput{
  Code: 400,
}
  if err := p.Error.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Error), err)
  }
  return nil
}

func (p *Pico3ServiceGetImageInfoResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_image_info_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Pico3ServiceGetImageInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *Pico3ServiceGetImageInfoResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetError() {
    if err := oprot.WriteFieldBegin("error", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error: ", p), err) }
    if err := p.Error.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Error), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error: ", p), err) }
  }
  return err
}

func (p *Pico3ServiceGetImageInfoResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Pico3ServiceGetImageInfoResult(%+v)", *p)
}

type Pico3ServiceListImageSpecsArgs struct {
}

func NewPico3ServiceListImageSpecsArgs() *Pico3ServiceListImageSpecsArgs {
  return &Pico3ServiceListImageSpecsArgs{}
}

func (p *Pico3ServiceListImageSpecsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Pico3ServiceListImageSpecsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("list_image_specs_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Pico3ServiceListImageSpecsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Pico3ServiceListImageSpecsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type Pico3ServiceListImageSpecsResult struct {
  Success *ImageSpecsData `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewPico3ServiceListImageSpecsResult() *Pico3ServiceListImageSpecsResult {
  return &Pico3ServiceListImageSpecsResult{}
}

var Pico3ServiceListImageSpecsResult_Success_DEFAULT *ImageSpecsData
func (p *Pico3ServiceListImageSpecsResult) GetSuccess() *ImageSpecsData {
  if !p.IsSetSuccess() {
    return Pico3ServiceListImageSpecsResult_Success_DEFAULT
  }
return p.Success
}
func (p *Pico3ServiceListImageSpecsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *Pico3ServiceListImageSpecsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Pico3ServiceListImageSpecsResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &ImageSpecsData{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *Pico3ServiceListImageSpecsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("list_image_specs_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Pico3ServiceListImageSpecsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *Pico3ServiceListImageSpecsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Pico3ServiceListImageSpecsResult(%+v)", *p)
}

// Attributes:
//  - Token
type Pico3ServiceImageDeleteArgs struct {
  Token string `thrift:"token,1" db:"token" json:"token"`
}

func NewPico3ServiceImageDeleteArgs() *Pico3ServiceImageDeleteArgs {
  return &Pico3ServiceImageDeleteArgs{}
}


func (p *Pico3ServiceImageDeleteArgs) GetToken() string {
  return p.Token
}
func (p *Pico3ServiceImageDeleteArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Pico3ServiceImageDeleteArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Token = v
}
  return nil
}

func (p *Pico3ServiceImageDeleteArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("image_delete_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Pico3ServiceImageDeleteArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("token", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:token: ", p), err) }
  if err := oprot.WriteString(string(p.Token)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.token (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:token: ", p), err) }
  return err
}

func (p *Pico3ServiceImageDeleteArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Pico3ServiceImageDeleteArgs(%+v)", *p)
}

// Attributes:
//  - Error
type Pico3ServiceImageDeleteResult struct {
  Error *InvalidInput `thrift:"error,1" db:"error" json:"error,omitempty"`
}

func NewPico3ServiceImageDeleteResult() *Pico3ServiceImageDeleteResult {
  return &Pico3ServiceImageDeleteResult{}
}

var Pico3ServiceImageDeleteResult_Error_DEFAULT *InvalidInput
func (p *Pico3ServiceImageDeleteResult) GetError() *InvalidInput {
  if !p.IsSetError() {
    return Pico3ServiceImageDeleteResult_Error_DEFAULT
  }
return p.Error
}
func (p *Pico3ServiceImageDeleteResult) IsSetError() bool {
  return p.Error != nil
}

func (p *Pico3ServiceImageDeleteResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Pico3ServiceImageDeleteResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Error = &InvalidInput{
  Code: 400,
}
  if err := p.Error.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Error), err)
  }
  return nil
}

func (p *Pico3ServiceImageDeleteResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("image_delete_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Pico3ServiceImageDeleteResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetError() {
    if err := oprot.WriteFieldBegin("error", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error: ", p), err) }
    if err := p.Error.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Error), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error: ", p), err) }
  }
  return err
}

func (p *Pico3ServiceImageDeleteResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Pico3ServiceImageDeleteResult(%+v)", *p)
}

// Attributes:
//  - Param
type Pico3ServiceBatchGetImageInfoArgs struct {
  Param *BatchGetImageInfoParam `thrift:"param,1" db:"param" json:"param"`
}

func NewPico3ServiceBatchGetImageInfoArgs() *Pico3ServiceBatchGetImageInfoArgs {
  return &Pico3ServiceBatchGetImageInfoArgs{}
}

var Pico3ServiceBatchGetImageInfoArgs_Param_DEFAULT *BatchGetImageInfoParam
func (p *Pico3ServiceBatchGetImageInfoArgs) GetParam() *BatchGetImageInfoParam {
  if !p.IsSetParam() {
    return Pico3ServiceBatchGetImageInfoArgs_Param_DEFAULT
  }
return p.Param
}
func (p *Pico3ServiceBatchGetImageInfoArgs) IsSetParam() bool {
  return p.Param != nil
}

func (p *Pico3ServiceBatchGetImageInfoArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Pico3ServiceBatchGetImageInfoArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Param = &BatchGetImageInfoParam{
  Tokens: []string{
  },
}
  if err := p.Param.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Param), err)
  }
  return nil
}

func (p *Pico3ServiceBatchGetImageInfoArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("batch_get_image_info_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Pico3ServiceBatchGetImageInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("param", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:param: ", p), err) }
  if err := p.Param.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Param), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:param: ", p), err) }
  return err
}

func (p *Pico3ServiceBatchGetImageInfoArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Pico3ServiceBatchGetImageInfoArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Error
type Pico3ServiceBatchGetImageInfoResult struct {
  Success map[string]*ImageMeta `thrift:"success,0" db:"success" json:"success,omitempty"`
  Error *InvalidInput `thrift:"error,1" db:"error" json:"error,omitempty"`
}

func NewPico3ServiceBatchGetImageInfoResult() *Pico3ServiceBatchGetImageInfoResult {
  return &Pico3ServiceBatchGetImageInfoResult{}
}

var Pico3ServiceBatchGetImageInfoResult_Success_DEFAULT map[string]*ImageMeta

func (p *Pico3ServiceBatchGetImageInfoResult) GetSuccess() map[string]*ImageMeta {
  return p.Success
}
var Pico3ServiceBatchGetImageInfoResult_Error_DEFAULT *InvalidInput
func (p *Pico3ServiceBatchGetImageInfoResult) GetError() *InvalidInput {
  if !p.IsSetError() {
    return Pico3ServiceBatchGetImageInfoResult_Error_DEFAULT
  }
return p.Error
}
func (p *Pico3ServiceBatchGetImageInfoResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *Pico3ServiceBatchGetImageInfoResult) IsSetError() bool {
  return p.Error != nil
}

func (p *Pico3ServiceBatchGetImageInfoResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Pico3ServiceBatchGetImageInfoResult)  ReadField0(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]*ImageMeta, size)
  p.Success =  tMap
  for i := 0; i < size; i ++ {
var _key48 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key48 = v
}
    _val49 := &ImageMeta{}
    if err := _val49.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val49), err)
    }
    p.Success[_key48] = _val49
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *Pico3ServiceBatchGetImageInfoResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Error = &InvalidInput{
  Code: 400,
}
  if err := p.Error.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Error), err)
  }
  return nil
}

func (p *Pico3ServiceBatchGetImageInfoResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("batch_get_image_info_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Pico3ServiceBatchGetImageInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.MAP, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.Success {
      if err := oprot.WriteString(string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *Pico3ServiceBatchGetImageInfoResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetError() {
    if err := oprot.WriteFieldBegin("error", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error: ", p), err) }
    if err := p.Error.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Error), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error: ", p), err) }
  }
  return err
}

func (p *Pico3ServiceBatchGetImageInfoResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Pico3ServiceBatchGetImageInfoResult(%+v)", *p)
}

// Attributes:
//  - StrategyParam
type Pico3ServiceFetchScheduleStrategyArgs struct {
  StrategyParam *ScheduleStrategyParam `thrift:"strategy_param,1" db:"strategy_param" json:"strategy_param"`
}

func NewPico3ServiceFetchScheduleStrategyArgs() *Pico3ServiceFetchScheduleStrategyArgs {
  return &Pico3ServiceFetchScheduleStrategyArgs{}
}

var Pico3ServiceFetchScheduleStrategyArgs_StrategyParam_DEFAULT *ScheduleStrategyParam
func (p *Pico3ServiceFetchScheduleStrategyArgs) GetStrategyParam() *ScheduleStrategyParam {
  if !p.IsSetStrategyParam() {
    return Pico3ServiceFetchScheduleStrategyArgs_StrategyParam_DEFAULT
  }
return p.StrategyParam
}
func (p *Pico3ServiceFetchScheduleStrategyArgs) IsSetStrategyParam() bool {
  return p.StrategyParam != nil
}

func (p *Pico3ServiceFetchScheduleStrategyArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Pico3ServiceFetchScheduleStrategyArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.StrategyParam = &ScheduleStrategyParam{}
  if err := p.StrategyParam.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.StrategyParam), err)
  }
  return nil
}

func (p *Pico3ServiceFetchScheduleStrategyArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("fetch_schedule_strategy_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Pico3ServiceFetchScheduleStrategyArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("strategy_param", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:strategy_param: ", p), err) }
  if err := p.StrategyParam.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.StrategyParam), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:strategy_param: ", p), err) }
  return err
}

func (p *Pico3ServiceFetchScheduleStrategyArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Pico3ServiceFetchScheduleStrategyArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Error
type Pico3ServiceFetchScheduleStrategyResult struct {
  Success *StrategyObject `thrift:"success,0" db:"success" json:"success,omitempty"`
  Error *InvalidInput `thrift:"error,1" db:"error" json:"error,omitempty"`
}

func NewPico3ServiceFetchScheduleStrategyResult() *Pico3ServiceFetchScheduleStrategyResult {
  return &Pico3ServiceFetchScheduleStrategyResult{}
}

var Pico3ServiceFetchScheduleStrategyResult_Success_DEFAULT *StrategyObject
func (p *Pico3ServiceFetchScheduleStrategyResult) GetSuccess() *StrategyObject {
  if !p.IsSetSuccess() {
    return Pico3ServiceFetchScheduleStrategyResult_Success_DEFAULT
  }
return p.Success
}
var Pico3ServiceFetchScheduleStrategyResult_Error_DEFAULT *InvalidInput
func (p *Pico3ServiceFetchScheduleStrategyResult) GetError() *InvalidInput {
  if !p.IsSetError() {
    return Pico3ServiceFetchScheduleStrategyResult_Error_DEFAULT
  }
return p.Error
}
func (p *Pico3ServiceFetchScheduleStrategyResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *Pico3ServiceFetchScheduleStrategyResult) IsSetError() bool {
  return p.Error != nil
}

func (p *Pico3ServiceFetchScheduleStrategyResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Pico3ServiceFetchScheduleStrategyResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &StrategyObject{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *Pico3ServiceFetchScheduleStrategyResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Error = &InvalidInput{
  Code: 400,
}
  if err := p.Error.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Error), err)
  }
  return nil
}

func (p *Pico3ServiceFetchScheduleStrategyResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("fetch_schedule_strategy_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Pico3ServiceFetchScheduleStrategyResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *Pico3ServiceFetchScheduleStrategyResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetError() {
    if err := oprot.WriteFieldBegin("error", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error: ", p), err) }
    if err := p.Error.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Error), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error: ", p), err) }
  }
  return err
}

func (p *Pico3ServiceFetchScheduleStrategyResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Pico3ServiceFetchScheduleStrategyResult(%+v)", *p)
}

// Attributes:
//  - ConvertParam
type Pico3ServiceConvertToPrivacyImagesArgs struct {
  ConvertParam *ConvertToPrivacyImagesParam `thrift:"convert_param,1" db:"convert_param" json:"convert_param"`
}

func NewPico3ServiceConvertToPrivacyImagesArgs() *Pico3ServiceConvertToPrivacyImagesArgs {
  return &Pico3ServiceConvertToPrivacyImagesArgs{}
}

var Pico3ServiceConvertToPrivacyImagesArgs_ConvertParam_DEFAULT *ConvertToPrivacyImagesParam
func (p *Pico3ServiceConvertToPrivacyImagesArgs) GetConvertParam() *ConvertToPrivacyImagesParam {
  if !p.IsSetConvertParam() {
    return Pico3ServiceConvertToPrivacyImagesArgs_ConvertParam_DEFAULT
  }
return p.ConvertParam
}
func (p *Pico3ServiceConvertToPrivacyImagesArgs) IsSetConvertParam() bool {
  return p.ConvertParam != nil
}

func (p *Pico3ServiceConvertToPrivacyImagesArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Pico3ServiceConvertToPrivacyImagesArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.ConvertParam = &ConvertToPrivacyImagesParam{
  IsDeleteOrigin: true,
}
  if err := p.ConvertParam.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ConvertParam), err)
  }
  return nil
}

func (p *Pico3ServiceConvertToPrivacyImagesArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("convert_to_privacy_images_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Pico3ServiceConvertToPrivacyImagesArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("convert_param", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:convert_param: ", p), err) }
  if err := p.ConvertParam.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ConvertParam), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:convert_param: ", p), err) }
  return err
}

func (p *Pico3ServiceConvertToPrivacyImagesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Pico3ServiceConvertToPrivacyImagesArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Error
type Pico3ServiceConvertToPrivacyImagesResult struct {
  Success map[string]int64 `thrift:"success,0" db:"success" json:"success,omitempty"`
  Error *InvalidInput `thrift:"error,1" db:"error" json:"error,omitempty"`
}

func NewPico3ServiceConvertToPrivacyImagesResult() *Pico3ServiceConvertToPrivacyImagesResult {
  return &Pico3ServiceConvertToPrivacyImagesResult{}
}

var Pico3ServiceConvertToPrivacyImagesResult_Success_DEFAULT map[string]int64

func (p *Pico3ServiceConvertToPrivacyImagesResult) GetSuccess() map[string]int64 {
  return p.Success
}
var Pico3ServiceConvertToPrivacyImagesResult_Error_DEFAULT *InvalidInput
func (p *Pico3ServiceConvertToPrivacyImagesResult) GetError() *InvalidInput {
  if !p.IsSetError() {
    return Pico3ServiceConvertToPrivacyImagesResult_Error_DEFAULT
  }
return p.Error
}
func (p *Pico3ServiceConvertToPrivacyImagesResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *Pico3ServiceConvertToPrivacyImagesResult) IsSetError() bool {
  return p.Error != nil
}

func (p *Pico3ServiceConvertToPrivacyImagesResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Pico3ServiceConvertToPrivacyImagesResult)  ReadField0(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]int64, size)
  p.Success =  tMap
  for i := 0; i < size; i ++ {
var _key50 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key50 = v
}
var _val51 int64
    if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val51 = v
}
    p.Success[_key50] = _val51
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *Pico3ServiceConvertToPrivacyImagesResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Error = &InvalidInput{
  Code: 400,
}
  if err := p.Error.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Error), err)
  }
  return nil
}

func (p *Pico3ServiceConvertToPrivacyImagesResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("convert_to_privacy_images_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Pico3ServiceConvertToPrivacyImagesResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.MAP, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteMapBegin(thrift.STRING, thrift.I64, len(p.Success)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.Success {
      if err := oprot.WriteString(string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteI64(int64(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *Pico3ServiceConvertToPrivacyImagesResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetError() {
    if err := oprot.WriteFieldBegin("error", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error: ", p), err) }
    if err := p.Error.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Error), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error: ", p), err) }
  }
  return err
}

func (p *Pico3ServiceConvertToPrivacyImagesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Pico3ServiceConvertToPrivacyImagesResult(%+v)", *p)
}


